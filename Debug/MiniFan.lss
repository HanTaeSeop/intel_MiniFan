
MiniFan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00800100  000018e0  00001974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009b  008001d0  008001d0  00001a44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a8  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004180  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bc0  00000000  00000000  00006108  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027ed  00000000  00000000  00007cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c8  00000000  00000000  0000a4b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d24  00000000  00000000  0000ad80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017ba  00000000  00000000  0000baa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000d25e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c0       	rjmp	.+246    	; 0x11c <__vector_9>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 ee       	ldi	r30, 0xE0	; 224
      a0:	f8 e1       	ldi	r31, 0x18	; 24
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3d       	cpi	r26, 0xD0	; 208
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a0 ed       	ldi	r26, 0xD0	; 208
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 36       	cpi	r26, 0x6B	; 107
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	e6 d7       	rcall	.+4044   	; 0x1090 <main>
      c4:	0c 94 6e 0c 	jmp	0x18dc	; 0x18dc <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <__vector_16>:
ï»¿#include "apMain.h"

FILE UARTMODE = FDEV_SETUP_STREAM(UART0_Transmit, NULL,_FDEV_SETUP_WRITE);
//interrupt
ISR(TIMER0_OVF_vect)
{
      ca:	1f 92       	push	r1
      cc:	0f 92       	push	r0
      ce:	0f b6       	in	r0, 0x3f	; 63
      d0:	0f 92       	push	r0
      d2:	11 24       	eor	r1, r1
      d4:	0b b6       	in	r0, 0x3b	; 59
      d6:	0f 92       	push	r0
      d8:	2f 93       	push	r18
      da:	3f 93       	push	r19
      dc:	4f 93       	push	r20
      de:	5f 93       	push	r21
      e0:	6f 93       	push	r22
      e2:	7f 93       	push	r23
      e4:	8f 93       	push	r24
      e6:	9f 93       	push	r25
      e8:	af 93       	push	r26
      ea:	bf 93       	push	r27
      ec:	ef 93       	push	r30
      ee:	ff 93       	push	r31
	FND_ISR_Process();
      f0:	f5 d6       	rcall	.+3562   	; 0xedc <FND_ISR_Process>
	TCNT0=130;
      f2:	82 e8       	ldi	r24, 0x82	; 130
      f4:	82 bf       	out	0x32, r24	; 50
}
      f6:	ff 91       	pop	r31
      f8:	ef 91       	pop	r30
      fa:	bf 91       	pop	r27
      fc:	af 91       	pop	r26
      fe:	9f 91       	pop	r25
     100:	8f 91       	pop	r24
     102:	7f 91       	pop	r23
     104:	6f 91       	pop	r22
     106:	5f 91       	pop	r21
     108:	4f 91       	pop	r20
     10a:	3f 91       	pop	r19
     10c:	2f 91       	pop	r18
     10e:	0f 90       	pop	r0
     110:	0b be       	out	0x3b, r0	; 59
     112:	0f 90       	pop	r0
     114:	0f be       	out	0x3f, r0	; 63
     116:	0f 90       	pop	r0
     118:	1f 90       	pop	r1
     11a:	18 95       	reti

0000011c <__vector_9>:

ISR(TIMER2_COMP_vect)
{
     11c:	1f 92       	push	r1
     11e:	0f 92       	push	r0
     120:	0f b6       	in	r0, 0x3f	; 63
     122:	0f 92       	push	r0
     124:	11 24       	eor	r1, r1
     126:	0b b6       	in	r0, 0x3b	; 59
     128:	0f 92       	push	r0
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	ef 93       	push	r30
     140:	ff 93       	push	r31
	static uint8_t data;
	data = Model_getFanTimer_Start();
     142:	3b d2       	rcall	.+1142   	; 0x5ba <Model_getFanTimer_Start>
	if(data == STOP) return;
	
	FanTimer_decMilisec();
     144:	81 11       	cpse	r24, r1
     146:	62 d4       	rcall	.+2244   	; 0xa0c <FanTimer_decMilisec>
}
     148:	ff 91       	pop	r31
     14a:	ef 91       	pop	r30
     14c:	bf 91       	pop	r27
     14e:	af 91       	pop	r26
     150:	9f 91       	pop	r25
     152:	8f 91       	pop	r24
     154:	7f 91       	pop	r23
     156:	6f 91       	pop	r22
     158:	5f 91       	pop	r21
     15a:	4f 91       	pop	r20
     15c:	3f 91       	pop	r19
     15e:	2f 91       	pop	r18
     160:	0f 90       	pop	r0
     162:	0b be       	out	0x3b, r0	; 59
     164:	0f 90       	pop	r0
     166:	0f be       	out	0x3f, r0	; 63
     168:	0f 90       	pop	r0
     16a:	1f 90       	pop	r1
     16c:	18 95       	reti

0000016e <__vector_18>:

ISR(USART0_RX_vect)
{
     16e:	1f 92       	push	r1
     170:	0f 92       	push	r0
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	0f 92       	push	r0
     176:	11 24       	eor	r1, r1
     178:	0b b6       	in	r0, 0x3b	; 59
     17a:	0f 92       	push	r0
     17c:	2f 93       	push	r18
     17e:	3f 93       	push	r19
     180:	4f 93       	push	r20
     182:	5f 93       	push	r21
     184:	6f 93       	push	r22
     186:	7f 93       	push	r23
     188:	8f 93       	push	r24
     18a:	9f 93       	push	r25
     18c:	af 93       	push	r26
     18e:	bf 93       	push	r27
     190:	ef 93       	push	r30
     192:	ff 93       	push	r31
	UART0_ISR_Process();
     194:	f7 d7       	rcall	.+4078   	; 0x1184 <UART0_ISR_Process>
}
     196:	ff 91       	pop	r31
     198:	ef 91       	pop	r30
     19a:	bf 91       	pop	r27
     19c:	af 91       	pop	r26
     19e:	9f 91       	pop	r25
     1a0:	8f 91       	pop	r24
     1a2:	7f 91       	pop	r23
     1a4:	6f 91       	pop	r22
     1a6:	5f 91       	pop	r21
     1a8:	4f 91       	pop	r20
     1aa:	3f 91       	pop	r19
     1ac:	2f 91       	pop	r18
     1ae:	0f 90       	pop	r0
     1b0:	0b be       	out	0x3b, r0	; 59
     1b2:	0f 90       	pop	r0
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	0f 90       	pop	r0
     1b8:	1f 90       	pop	r1
     1ba:	18 95       	reti

000001bc <apMain_init>:

void apMain_init()
{
		
		//Listner initialize
		Listener_init();
     1bc:	22 d0       	rcall	.+68     	; 0x202 <Listener_init>
		
		//Model initialize
		Model_setFanMode(MANNUAL);
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	f3 d1       	rcall	.+998    	; 0x5a8 <Model_setFanMode>
		Model_setFanWind(OFF);
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	03 d2       	rcall	.+1030   	; 0x5cc <Model_setFanWind>
		Model_setFanTime(CON);
     1c6:	80 e0       	ldi	r24, 0x00	; 0
		Model_setFanTimer_Start(STOP);
     1c8:	f5 d1       	rcall	.+1002   	; 0x5b4 <Model_setFanTime>
		Fansound_init();
     1ca:	80 e0       	ldi	r24, 0x00	; 0
		
		//service initialize
		Fan_autoInit();
     1cc:	f9 d1       	rcall	.+1010   	; 0x5c0 <Model_setFanTimer_Start>
		FanTimer_init();
     1ce:	0d d1       	rcall	.+538    	; 0x3ea <Fansound_init>
     1d0:	ae d2       	rcall	.+1372   	; 0x72e <Fan_autoInit>
		
		//presenter initialize
		Presenter_init();
     1d2:	d9 d3       	rcall	.+1970   	; 0x986 <FanTimer_init>
     1d4:	fe d1       	rcall	.+1020   	; 0x5d2 <Presenter_init>
		
		//driver initialize
		Motor_init();
     1d6:	32 d7       	rcall	.+3684   	; 0x103c <Motor_init>
     1d8:	a9 d7       	rcall	.+3922   	; 0x112c <Timer0_init>
		
		//peri init
		Timer0_init();
     1da:	b1 d7       	rcall	.+3938   	; 0x113e <Timer2_init>
     1dc:	bc d7       	rcall	.+3960   	; 0x1156 <UART0_init>
		Timer2_init();
     1de:	78 94       	sei
     1e0:	80 e0       	ldi	r24, 0x00	; 0
		UART0_init();
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <__iob+0x3>
		//global iterrupt
		sei();
		stdout = &UARTMODE;
     1e8:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <__iob+0x2>
     1ec:	08 95       	ret

000001ee <apMain_run>:
     1ee:	5a d0       	rcall	.+180    	; 0x2a4 <Listener_fanModeCheck>
     1f0:	29 d0       	rcall	.+82     	; 0x244 <Listener_fanWindCheck>
     1f2:	71 d0       	rcall	.+226    	; 0x2d6 <Listener_fanTimeCheck>
     1f4:	a1 d0       	rcall	.+322    	; 0x338 <Listener_fanTimer_Start>
	Listener_fanWindCheck();
	Listener_fanTimeCheck();
	Listener_fanTimer_Start();
	
	//Service ON
	Fan_mannualRun();
     1f6:	89 d3       	rcall	.+1810   	; 0x90a <Fan_mannualRun>
	FanTimer_disp();
     1f8:	4d d4       	rcall	.+2202   	; 0xa94 <FanTimer_disp>
     1fa:	a5 d2       	rcall	.+1354   	; 0x746 <Fan_autoRun>
	Fan_autoRun();
     1fc:	5a d4       	rcall	.+2228   	; 0xab2 <FanUart0_run>
     1fe:	3c c7       	rjmp	.+3704   	; 0x1078 <Motor_On>
	FanUart0_run();
     200:	08 95       	ret

00000202 <Listener_init>:
     202:	20 e0       	ldi	r18, 0x00	; 0
	
	//driver ON
	Motor_On();
     204:	49 e3       	ldi	r20, 0x39	; 57
     206:	50 e0       	ldi	r21, 0x00	; 0
     208:	6a e3       	ldi	r22, 0x3A	; 58

button_t btn_mode,btn_wind,btn_timer,btn_start;

void Listener_init()
{
	Button_init(&btn_mode,&DDRA,&PINA,0);
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	85 ee       	ldi	r24, 0xE5	; 229
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	bd d4       	rcall	.+2426   	; 0xb8c <Button_init>
	Button_init(&btn_wind,&DDRA,&PINA,1);
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	49 e3       	ldi	r20, 0x39	; 57
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	6a e3       	ldi	r22, 0x3A	; 58
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	81 ef       	ldi	r24, 0xF1	; 241
     21e:	91 e0       	ldi	r25, 0x01	; 1
     220:	b5 d4       	rcall	.+2410   	; 0xb8c <Button_init>
	Button_init(&btn_timer,&DDRA,&PINA,2);
     222:	22 e0       	ldi	r18, 0x02	; 2
     224:	49 e3       	ldi	r20, 0x39	; 57
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	6a e3       	ldi	r22, 0x3A	; 58
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	8b ee       	ldi	r24, 0xEB	; 235
     22e:	91 e0       	ldi	r25, 0x01	; 1
     230:	ad d4       	rcall	.+2394   	; 0xb8c <Button_init>
	Button_init(&btn_start,&DDRA,&PINA,3);
     232:	23 e0       	ldi	r18, 0x03	; 3
     234:	49 e3       	ldi	r20, 0x39	; 57
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	6a e3       	ldi	r22, 0x3A	; 58
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	8f ed       	ldi	r24, 0xDF	; 223
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	a5 c4       	rjmp	.+2378   	; 0xb8c <Button_init>
     242:	08 95       	ret

00000244 <Listener_fanWindCheck>:
	}	
}

void Listener_fanWindCheck()
{
	uint8_t fanModeCheck = Model_getFanMode();
     244:	ae d1       	rcall	.+860    	; 0x5a2 <Model_getFanMode>
	if(fanModeCheck != MANNUAL) return;
     246:	81 11       	cpse	r24, r1
	uint8_t fanWind = Model_getFanWind();
     248:	2c c0       	rjmp	.+88     	; 0x2a2 <Listener_fanWindCheck+0x5e>
     24a:	bd d1       	rcall	.+890    	; 0x5c6 <Model_getFanWind>
	switch(fanWind)
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	79 f0       	breq	.+30     	; 0x26e <Listener_fanWindCheck+0x2a>
     250:	28 f0       	brcs	.+10     	; 0x25c <Listener_fanWindCheck+0x18>
     252:	82 30       	cpi	r24, 0x02	; 2
     254:	a9 f0       	breq	.+42     	; 0x280 <Listener_fanWindCheck+0x3c>
     256:	83 30       	cpi	r24, 0x03	; 3
     258:	e1 f0       	breq	.+56     	; 0x292 <Listener_fanWindCheck+0x4e>
     25a:	08 95       	ret
	{
		case OFF :
		
		if(Button_GetState(&btn_wind)==ACT_RELEASED)
     25c:	81 ef       	ldi	r24, 0xF1	; 241
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	a2 d4       	rcall	.+2372   	; 0xba6 <Button_GetState>
     262:	81 30       	cpi	r24, 0x01	; 1
		{
			Sound_Wind();
     264:	f1 f4       	brne	.+60     	; 0x2a2 <Listener_fanWindCheck+0x5e>
     266:	2d d1       	rcall	.+602    	; 0x4c2 <Sound_Wind>
			fanWind = WEAK;
			Model_setFanWind(fanWind);
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	b0 c1       	rjmp	.+864    	; 0x5cc <Model_setFanWind>
     26c:	08 95       	ret
		}
		break;
		
		case WEAK :
		if(Button_GetState(&btn_wind)==ACT_RELEASED)
     26e:	81 ef       	ldi	r24, 0xF1	; 241
     270:	91 e0       	ldi	r25, 0x01	; 1
     272:	99 d4       	rcall	.+2354   	; 0xba6 <Button_GetState>
     274:	81 30       	cpi	r24, 0x01	; 1
		{
			Sound_Wind();
     276:	a9 f4       	brne	.+42     	; 0x2a2 <Listener_fanWindCheck+0x5e>
			fanWind = NORMAL;
			Model_setFanWind(fanWind);
     278:	24 d1       	rcall	.+584    	; 0x4c2 <Sound_Wind>
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	a7 c1       	rjmp	.+846    	; 0x5cc <Model_setFanWind>
		}
		break;
		
		case NORMAL :
		if(Button_GetState(&btn_wind)==ACT_RELEASED)
     27e:	08 95       	ret
     280:	81 ef       	ldi	r24, 0xF1	; 241
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	90 d4       	rcall	.+2336   	; 0xba6 <Button_GetState>
     286:	81 30       	cpi	r24, 0x01	; 1
		{
			Sound_Wind();
     288:	61 f4       	brne	.+24     	; 0x2a2 <Listener_fanWindCheck+0x5e>
			fanWind = STRONG;
			Model_setFanWind(fanWind);
     28a:	1b d1       	rcall	.+566    	; 0x4c2 <Sound_Wind>
     28c:	83 e0       	ldi	r24, 0x03	; 3
     28e:	9e c1       	rjmp	.+828    	; 0x5cc <Model_setFanWind>
		}
		break;
		
		case STRONG :
		if(Button_GetState(&btn_wind)==ACT_RELEASED)
     290:	08 95       	ret
     292:	81 ef       	ldi	r24, 0xF1	; 241
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	87 d4       	rcall	.+2318   	; 0xba6 <Button_GetState>
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	19 f4       	brne	.+6      	; 0x2a2 <Listener_fanWindCheck+0x5e>
		{
			Sound_Wind();
     29c:	12 d1       	rcall	.+548    	; 0x4c2 <Sound_Wind>
     29e:	80 e0       	ldi	r24, 0x00	; 0
			fanWind = OFF;
			Model_setFanWind(fanWind);
     2a0:	95 c1       	rjmp	.+810    	; 0x5cc <Model_setFanWind>
     2a2:	08 95       	ret

000002a4 <Listener_fanModeCheck>:
     2a4:	7e d1       	rcall	.+764    	; 0x5a2 <Model_getFanMode>
     2a6:	88 23       	and	r24, r24
}

void Listener_fanModeCheck()
{
	uint8_t fanMode =Model_getFanMode();
	switch(fanMode)
     2a8:	19 f0       	breq	.+6      	; 0x2b0 <Listener_fanModeCheck+0xc>
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	59 f0       	breq	.+22     	; 0x2c4 <Listener_fanModeCheck+0x20>
	{
		case MANNUAL :
		Listener_fanWindCheck();
     2ae:	08 95       	ret
     2b0:	c9 df       	rcall	.-110    	; 0x244 <Listener_fanWindCheck>
		if(Button_GetState(&btn_mode)==ACT_RELEASED)
     2b2:	85 ee       	ldi	r24, 0xE5	; 229
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	77 d4       	rcall	.+2286   	; 0xba6 <Button_GetState>
     2b8:	81 30       	cpi	r24, 0x01	; 1
		{	
			Sound_Auto();
     2ba:	61 f4       	brne	.+24     	; 0x2d4 <Listener_fanModeCheck+0x30>
     2bc:	9c d0       	rcall	.+312    	; 0x3f6 <Sound_Auto>
			fanMode = AUTO;
			Model_setFanMode(fanMode);
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	73 c1       	rjmp	.+742    	; 0x5a8 <Model_setFanMode>
     2c2:	08 95       	ret
		}
		break;
		
		case AUTO :
		if(Button_GetState(&btn_mode)==ACT_RELEASED)
     2c4:	85 ee       	ldi	r24, 0xE5	; 229
     2c6:	91 e0       	ldi	r25, 0x01	; 1
     2c8:	6e d4       	rcall	.+2268   	; 0xba6 <Button_GetState>
     2ca:	81 30       	cpi	r24, 0x01	; 1
		{	
			Sound_Mannual();
     2cc:	19 f4       	brne	.+6      	; 0x2d4 <Listener_fanModeCheck+0x30>
     2ce:	c6 d0       	rcall	.+396    	; 0x45c <Sound_Mannual>
			fanMode = MANNUAL;
			Model_setFanMode(fanMode);
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	6a c1       	rjmp	.+724    	; 0x5a8 <Model_setFanMode>
     2d4:	08 95       	ret

000002d6 <Listener_fanTimeCheck>:
     2d6:	6b d1       	rcall	.+726    	; 0x5ae <Model_getFanTime>
}

void Listener_fanTimeCheck()
{
	uint8_t fanTime = Model_getFanTime();
	switch(fanTime)
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	81 f0       	breq	.+32     	; 0x2fc <Listener_fanTimeCheck+0x26>
     2dc:	28 f0       	brcs	.+10     	; 0x2e8 <Listener_fanTimeCheck+0x12>
     2de:	82 30       	cpi	r24, 0x02	; 2
     2e0:	b9 f0       	breq	.+46     	; 0x310 <Listener_fanTimeCheck+0x3a>
     2e2:	83 30       	cpi	r24, 0x03	; 3
     2e4:	f9 f0       	breq	.+62     	; 0x324 <Listener_fanTimeCheck+0x4e>
     2e6:	08 95       	ret
	{
	case CON	:
	if(Button_GetState(&btn_timer)==ACT_RELEASED)
     2e8:	8b ee       	ldi	r24, 0xEB	; 235
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	5c d4       	rcall	.+2232   	; 0xba6 <Button_GetState>
     2ee:	81 30       	cpi	r24, 0x01	; 1
	{
		Sound_Timer();
     2f0:	11 f5       	brne	.+68     	; 0x336 <Listener_fanTimeCheck+0x60>
		fanTime = MIN3;
		Model_setFanTime(fanTime);
     2f2:	fa d0       	rcall	.+500    	; 0x4e8 <Sound_Timer>
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	5e d1       	rcall	.+700    	; 0x5b4 <Model_setFanTime>
		FanTimer_Mode();
     2f8:	51 c3       	rjmp	.+1698   	; 0x99c <FanTimer_Mode>
     2fa:	08 95       	ret
	}
	break;
	case MIN3	:
	if(Button_GetState(&btn_timer)==ACT_RELEASED)
     2fc:	8b ee       	ldi	r24, 0xEB	; 235
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	52 d4       	rcall	.+2212   	; 0xba6 <Button_GetState>
	{
		Sound_Timer();
     302:	81 30       	cpi	r24, 0x01	; 1
		fanTime = MIN5;
		Model_setFanTime(fanTime);
     304:	c1 f4       	brne	.+48     	; 0x336 <Listener_fanTimeCheck+0x60>
     306:	f0 d0       	rcall	.+480    	; 0x4e8 <Sound_Timer>
		FanTimer_Mode();
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	54 d1       	rcall	.+680    	; 0x5b4 <Model_setFanTime>
	}
	break;
	case MIN5	:
	if(Button_GetState(&btn_timer)==ACT_RELEASED)
     30c:	47 c3       	rjmp	.+1678   	; 0x99c <FanTimer_Mode>
     30e:	08 95       	ret
     310:	8b ee       	ldi	r24, 0xEB	; 235
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	48 d4       	rcall	.+2192   	; 0xba6 <Button_GetState>
	{
		Sound_Timer();
     316:	81 30       	cpi	r24, 0x01	; 1
		fanTime = MIN7;
		Model_setFanTime(fanTime);
     318:	71 f4       	brne	.+28     	; 0x336 <Listener_fanTimeCheck+0x60>
		FanTimer_Mode();
     31a:	e6 d0       	rcall	.+460    	; 0x4e8 <Sound_Timer>
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	4a d1       	rcall	.+660    	; 0x5b4 <Model_setFanTime>
	}
	break;
	case MIN7	:
	if(Button_GetState(&btn_timer)==ACT_RELEASED)
     320:	3d c3       	rjmp	.+1658   	; 0x99c <FanTimer_Mode>
     322:	08 95       	ret
     324:	8b ee       	ldi	r24, 0xEB	; 235
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	3e d4       	rcall	.+2172   	; 0xba6 <Button_GetState>
     32a:	81 30       	cpi	r24, 0x01	; 1
	{
		Sound_Timer();
     32c:	21 f4       	brne	.+8      	; 0x336 <Listener_fanTimeCheck+0x60>
     32e:	dc d0       	rcall	.+440    	; 0x4e8 <Sound_Timer>
		fanTime = CON;
		Model_setFanTime(fanTime);
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	40 d1       	rcall	.+640    	; 0x5b4 <Model_setFanTime>
     334:	33 c3       	rjmp	.+1638   	; 0x99c <FanTimer_Mode>
		FanTimer_Mode();
     336:	08 95       	ret

00000338 <Listener_fanTimer_Start>:
     338:	40 d1       	rcall	.+640    	; 0x5ba <Model_getFanTimer_Start>
     33a:	88 23       	and	r24, r24
}

void Listener_fanTimer_Start()
{
	uint8_t fanRun = Model_getFanTimer_Start();
	switch(fanRun){
     33c:	19 f0       	breq	.+6      	; 0x344 <Listener_fanTimer_Start+0xc>
     33e:	81 30       	cpi	r24, 0x01	; 1
     340:	51 f0       	breq	.+20     	; 0x356 <Listener_fanTimer_Start+0x1e>
     342:	08 95       	ret
		case STOP :
		if(Button_GetState(&btn_start)==ACT_RELEASED)
     344:	8f ed       	ldi	r24, 0xDF	; 223
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	2e d4       	rcall	.+2140   	; 0xba6 <Button_GetState>
     34a:	81 30       	cpi	r24, 0x01	; 1
		{
			Sound_Start();
     34c:	61 f4       	brne	.+24     	; 0x366 <Listener_fanTimer_Start+0x2e>
			fanRun = START;
			Model_setFanTimer_Start(fanRun);
     34e:	db d0       	rcall	.+438    	; 0x506 <Sound_Start>
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	36 c1       	rjmp	.+620    	; 0x5c0 <Model_setFanTimer_Start>
		}
		break;
		case START :
		
		if(Button_GetState(&btn_start)==ACT_RELEASED)
     354:	08 95       	ret
     356:	8f ed       	ldi	r24, 0xDF	; 223
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	25 d4       	rcall	.+2122   	; 0xba6 <Button_GetState>
		{
			Sound_Timer();
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	19 f4       	brne	.+6      	; 0x366 <Listener_fanTimer_Start+0x2e>
			fanRun = STOP;
			Model_setFanTimer_Start(fanRun);
     360:	c3 d0       	rcall	.+390    	; 0x4e8 <Sound_Timer>
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	2d c1       	rjmp	.+602    	; 0x5c0 <Model_setFanTimer_Start>
     366:	08 95       	ret

00000368 <Sound_start>:
	DDRE |= (1<<4);
	Sound_start();
}

void Sound_start()
{
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
	Buzzer_soundOn();
     36c:	69 d4       	rcall	.+2258   	; 0xc40 <Buzzer_soundOn>
	Buzzer_makeHertz(1046);
     36e:	86 e1       	ldi	r24, 0x16	; 22
     370:	94 e0       	ldi	r25, 0x04	; 4
     372:	42 d4       	rcall	.+2180   	; 0xbf8 <Buzzer_makeHertz>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     374:	2f ef       	ldi	r18, 0xFF	; 255
     376:	81 ee       	ldi	r24, 0xE1	; 225
     378:	94 e0       	ldi	r25, 0x04	; 4
     37a:	21 50       	subi	r18, 0x01	; 1
     37c:	80 40       	sbci	r24, 0x00	; 0
     37e:	90 40       	sbci	r25, 0x00	; 0
     380:	e1 f7       	brne	.-8      	; 0x37a <Sound_start+0x12>
     382:	00 c0       	rjmp	.+0      	; 0x384 <Sound_start+0x1c>
     384:	00 00       	nop
	_delay_ms(100);
	TCNT3 = 0;
     386:	c8 e8       	ldi	r28, 0x88	; 136
     388:	d0 e0       	ldi	r29, 0x00	; 0
     38a:	19 82       	std	Y+1, r1	; 0x01
     38c:	18 82       	st	Y, r1
	Buzzer_makeHertz(1318);
     38e:	86 e2       	ldi	r24, 0x26	; 38
     390:	95 e0       	ldi	r25, 0x05	; 5
     392:	32 d4       	rcall	.+2148   	; 0xbf8 <Buzzer_makeHertz>
     394:	2f ef       	ldi	r18, 0xFF	; 255
     396:	81 ee       	ldi	r24, 0xE1	; 225
     398:	94 e0       	ldi	r25, 0x04	; 4
     39a:	21 50       	subi	r18, 0x01	; 1
     39c:	80 40       	sbci	r24, 0x00	; 0
     39e:	90 40       	sbci	r25, 0x00	; 0
     3a0:	e1 f7       	brne	.-8      	; 0x39a <Sound_start+0x32>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <Sound_start+0x3c>
     3a4:	00 00       	nop
	_delay_ms(100);
	TCNT3 = 0;
     3a6:	19 82       	std	Y+1, r1	; 0x01
	Buzzer_makeHertz(1567);
     3a8:	18 82       	st	Y, r1
     3aa:	8f e1       	ldi	r24, 0x1F	; 31
     3ac:	96 e0       	ldi	r25, 0x06	; 6
     3ae:	24 d4       	rcall	.+2120   	; 0xbf8 <Buzzer_makeHertz>
     3b0:	2f ef       	ldi	r18, 0xFF	; 255
     3b2:	81 ee       	ldi	r24, 0xE1	; 225
     3b4:	94 e0       	ldi	r25, 0x04	; 4
     3b6:	21 50       	subi	r18, 0x01	; 1
     3b8:	80 40       	sbci	r24, 0x00	; 0
     3ba:	90 40       	sbci	r25, 0x00	; 0
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <Sound_start+0x4e>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <Sound_start+0x58>
     3c0:	00 00       	nop
	_delay_ms(100);
	TCNT3 = 0;
     3c2:	19 82       	std	Y+1, r1	; 0x01
	Buzzer_makeHertz(1046);
     3c4:	18 82       	st	Y, r1
     3c6:	86 e1       	ldi	r24, 0x16	; 22
     3c8:	94 e0       	ldi	r25, 0x04	; 4
     3ca:	16 d4       	rcall	.+2092   	; 0xbf8 <Buzzer_makeHertz>
     3cc:	2f ef       	ldi	r18, 0xFF	; 255
     3ce:	81 ee       	ldi	r24, 0xE1	; 225
     3d0:	94 e0       	ldi	r25, 0x04	; 4
     3d2:	21 50       	subi	r18, 0x01	; 1
     3d4:	80 40       	sbci	r24, 0x00	; 0
     3d6:	90 40       	sbci	r25, 0x00	; 0
     3d8:	e1 f7       	brne	.-8      	; 0x3d2 <Sound_start+0x6a>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <Sound_start+0x74>
	_delay_ms(100);
	TCNT3 = 0;
     3dc:	00 00       	nop
     3de:	19 82       	std	Y+1, r1	; 0x01
	Buzzer_soundOff();
     3e0:	18 82       	st	Y, r1
     3e2:	34 d4       	rcall	.+2152   	; 0xc4c <Buzzer_soundOff>
}
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <Fansound_init>:
ï»¿#include "Model_Fan_Sound.h"

	
void Fansound_init()
{
	Buzzer_init();
     3ea:	36 d4       	rcall	.+2156   	; 0xc58 <Buzzer_init>
	DDRE |= (1<<4);
     3ec:	82 b1       	in	r24, 0x02	; 2
     3ee:	80 61       	ori	r24, 0x10	; 16
	Sound_start();
     3f0:	82 b9       	out	0x02, r24	; 2
     3f2:	ba cf       	rjmp	.-140    	; 0x368 <Sound_start>
     3f4:	08 95       	ret

000003f6 <Sound_Auto>:
	TCNT3 = 0;
	Buzzer_soundOff();
}

void Sound_Auto()
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
	Buzzer_soundOn();
     3fa:	22 d4       	rcall	.+2116   	; 0xc40 <Buzzer_soundOn>
	Buzzer_makeHertz(1567);
     3fc:	8f e1       	ldi	r24, 0x1F	; 31
     3fe:	96 e0       	ldi	r25, 0x06	; 6
     400:	fb d3       	rcall	.+2038   	; 0xbf8 <Buzzer_makeHertz>
     402:	2f ef       	ldi	r18, 0xFF	; 255
     404:	81 ee       	ldi	r24, 0xE1	; 225
     406:	94 e0       	ldi	r25, 0x04	; 4
     408:	21 50       	subi	r18, 0x01	; 1
     40a:	80 40       	sbci	r24, 0x00	; 0
     40c:	90 40       	sbci	r25, 0x00	; 0
     40e:	e1 f7       	brne	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     412:	00 00       	nop
	_delay_ms(100);
	TCNT3 = 0;
     414:	c8 e8       	ldi	r28, 0x88	; 136
     416:	d0 e0       	ldi	r29, 0x00	; 0
     418:	19 82       	std	Y+1, r1	; 0x01
     41a:	18 82       	st	Y, r1
	Buzzer_makeHertz(1046);
     41c:	86 e1       	ldi	r24, 0x16	; 22
     41e:	94 e0       	ldi	r25, 0x04	; 4
     420:	eb d3       	rcall	.+2006   	; 0xbf8 <Buzzer_makeHertz>
     422:	2f ef       	ldi	r18, 0xFF	; 255
     424:	81 ee       	ldi	r24, 0xE1	; 225
     426:	94 e0       	ldi	r25, 0x04	; 4
     428:	21 50       	subi	r18, 0x01	; 1
     42a:	80 40       	sbci	r24, 0x00	; 0
     42c:	90 40       	sbci	r25, 0x00	; 0
     42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     432:	00 00       	nop
	_delay_ms(100);
	TCNT3 = 0;
     434:	19 82       	std	Y+1, r1	; 0x01
	Buzzer_makeHertz(1567);
     436:	18 82       	st	Y, r1
     438:	8f e1       	ldi	r24, 0x1F	; 31
     43a:	96 e0       	ldi	r25, 0x06	; 6
     43c:	dd d3       	rcall	.+1978   	; 0xbf8 <Buzzer_makeHertz>
     43e:	2f ef       	ldi	r18, 0xFF	; 255
     440:	81 ee       	ldi	r24, 0xE1	; 225
     442:	94 e0       	ldi	r25, 0x04	; 4
     444:	21 50       	subi	r18, 0x01	; 1
     446:	80 40       	sbci	r24, 0x00	; 0
     448:	90 40       	sbci	r25, 0x00	; 0
     44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	_delay_ms(100);
	TCNT3 = 0;
     44e:	00 00       	nop
     450:	19 82       	std	Y+1, r1	; 0x01
	Buzzer_soundOff();
     452:	18 82       	st	Y, r1
     454:	fb d3       	rcall	.+2038   	; 0xc4c <Buzzer_soundOff>
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <Sound_Mannual>:

void Sound_Mannual()
{
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
	Buzzer_soundOn();
     460:	ef d3       	rcall	.+2014   	; 0xc40 <Buzzer_soundOn>
	Buzzer_makeHertz(1046);
     462:	86 e1       	ldi	r24, 0x16	; 22
     464:	94 e0       	ldi	r25, 0x04	; 4
     466:	c8 d3       	rcall	.+1936   	; 0xbf8 <Buzzer_makeHertz>
     468:	2f ef       	ldi	r18, 0xFF	; 255
     46a:	81 ee       	ldi	r24, 0xE1	; 225
     46c:	94 e0       	ldi	r25, 0x04	; 4
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	80 40       	sbci	r24, 0x00	; 0
     472:	90 40       	sbci	r25, 0x00	; 0
     474:	e1 f7       	brne	.-8      	; 0x46e <Sound_Mannual+0x12>
     476:	00 c0       	rjmp	.+0      	; 0x478 <Sound_Mannual+0x1c>
     478:	00 00       	nop
	_delay_ms(100);
	TCNT3 = 0;
     47a:	c8 e8       	ldi	r28, 0x88	; 136
     47c:	d0 e0       	ldi	r29, 0x00	; 0
     47e:	19 82       	std	Y+1, r1	; 0x01
     480:	18 82       	st	Y, r1
	Buzzer_makeHertz(1567);
     482:	8f e1       	ldi	r24, 0x1F	; 31
     484:	96 e0       	ldi	r25, 0x06	; 6
     486:	b8 d3       	rcall	.+1904   	; 0xbf8 <Buzzer_makeHertz>
     488:	2f ef       	ldi	r18, 0xFF	; 255
     48a:	81 ee       	ldi	r24, 0xE1	; 225
     48c:	94 e0       	ldi	r25, 0x04	; 4
     48e:	21 50       	subi	r18, 0x01	; 1
     490:	80 40       	sbci	r24, 0x00	; 0
     492:	90 40       	sbci	r25, 0x00	; 0
     494:	e1 f7       	brne	.-8      	; 0x48e <Sound_Mannual+0x32>
     496:	00 c0       	rjmp	.+0      	; 0x498 <Sound_Mannual+0x3c>
     498:	00 00       	nop
	_delay_ms(100);
	TCNT3 = 0;
     49a:	19 82       	std	Y+1, r1	; 0x01
	Buzzer_makeHertz(1046);
     49c:	18 82       	st	Y, r1
     49e:	86 e1       	ldi	r24, 0x16	; 22
     4a0:	94 e0       	ldi	r25, 0x04	; 4
     4a2:	aa d3       	rcall	.+1876   	; 0xbf8 <Buzzer_makeHertz>
     4a4:	2f ef       	ldi	r18, 0xFF	; 255
     4a6:	81 ee       	ldi	r24, 0xE1	; 225
     4a8:	94 e0       	ldi	r25, 0x04	; 4
     4aa:	21 50       	subi	r18, 0x01	; 1
     4ac:	80 40       	sbci	r24, 0x00	; 0
     4ae:	90 40       	sbci	r25, 0x00	; 0
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <Sound_Mannual+0x4e>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <Sound_Mannual+0x58>
	_delay_ms(100);
	TCNT3 = 0;
     4b4:	00 00       	nop
     4b6:	19 82       	std	Y+1, r1	; 0x01
	Buzzer_soundOff();
     4b8:	18 82       	st	Y, r1
     4ba:	c8 d3       	rcall	.+1936   	; 0xc4c <Buzzer_soundOff>
}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <Sound_Wind>:

void Sound_Wind()
{
	Buzzer_soundOn();
     4c2:	be d3       	rcall	.+1916   	; 0xc40 <Buzzer_soundOn>
	Buzzer_makeHertz(1046);
     4c4:	86 e1       	ldi	r24, 0x16	; 22
     4c6:	94 e0       	ldi	r25, 0x04	; 4
     4c8:	97 d3       	rcall	.+1838   	; 0xbf8 <Buzzer_makeHertz>
     4ca:	2f ef       	ldi	r18, 0xFF	; 255
     4cc:	81 ee       	ldi	r24, 0xE1	; 225
     4ce:	94 e0       	ldi	r25, 0x04	; 4
     4d0:	21 50       	subi	r18, 0x01	; 1
     4d2:	80 40       	sbci	r24, 0x00	; 0
     4d4:	90 40       	sbci	r25, 0x00	; 0
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <Sound_Wind+0xe>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <Sound_Wind+0x18>
     4da:	00 00       	nop
	_delay_ms(100);
	TCNT3 = 0;
     4dc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4e0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	Buzzer_soundOff();
     4e4:	b3 c3       	rjmp	.+1894   	; 0xc4c <Buzzer_soundOff>
     4e6:	08 95       	ret

000004e8 <Sound_Timer>:
}

void Sound_Timer()
{
	Buzzer_soundOn();
     4e8:	ab d3       	rcall	.+1878   	; 0xc40 <Buzzer_soundOn>
	Buzzer_makeHertz(1174);
     4ea:	86 e9       	ldi	r24, 0x96	; 150
     4ec:	94 e0       	ldi	r25, 0x04	; 4
     4ee:	84 d3       	rcall	.+1800   	; 0xbf8 <Buzzer_makeHertz>
     4f0:	2f ef       	ldi	r18, 0xFF	; 255
     4f2:	81 ee       	ldi	r24, 0xE1	; 225
     4f4:	94 e0       	ldi	r25, 0x04	; 4
     4f6:	21 50       	subi	r18, 0x01	; 1
     4f8:	80 40       	sbci	r24, 0x00	; 0
     4fa:	90 40       	sbci	r25, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <Sound_Timer+0xe>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <Sound_Timer+0x18>
	_delay_ms(100);
	Buzzer_soundOff();
     500:	00 00       	nop
     502:	a4 c3       	rjmp	.+1864   	; 0xc4c <Buzzer_soundOff>
     504:	08 95       	ret

00000506 <Sound_Start>:
}

void Sound_Start()
{
	Buzzer_soundOn();
     506:	9c d3       	rcall	.+1848   	; 0xc40 <Buzzer_soundOn>
	Buzzer_makeHertz(1046);
     508:	86 e1       	ldi	r24, 0x16	; 22
     50a:	94 e0       	ldi	r25, 0x04	; 4
     50c:	75 d3       	rcall	.+1770   	; 0xbf8 <Buzzer_makeHertz>
     50e:	2f ef       	ldi	r18, 0xFF	; 255
     510:	81 ee       	ldi	r24, 0xE1	; 225
     512:	94 e0       	ldi	r25, 0x04	; 4
     514:	21 50       	subi	r18, 0x01	; 1
     516:	80 40       	sbci	r24, 0x00	; 0
     518:	90 40       	sbci	r25, 0x00	; 0
     51a:	e1 f7       	brne	.-8      	; 0x514 <Sound_Start+0xe>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <Sound_Start+0x18>
     51e:	00 00       	nop
	_delay_ms(100);
	Buzzer_makeHertz(1174);
     520:	86 e9       	ldi	r24, 0x96	; 150
     522:	94 e0       	ldi	r25, 0x04	; 4
     524:	69 d3       	rcall	.+1746   	; 0xbf8 <Buzzer_makeHertz>
     526:	2f ef       	ldi	r18, 0xFF	; 255
     528:	81 ee       	ldi	r24, 0xE1	; 225
     52a:	94 e0       	ldi	r25, 0x04	; 4
     52c:	21 50       	subi	r18, 0x01	; 1
     52e:	80 40       	sbci	r24, 0x00	; 0
     530:	90 40       	sbci	r25, 0x00	; 0
     532:	e1 f7       	brne	.-8      	; 0x52c <Sound_Start+0x26>
     534:	00 c0       	rjmp	.+0      	; 0x536 <Sound_Start+0x30>
	_delay_ms(100);
	Buzzer_makeHertz(1318);
     536:	00 00       	nop
     538:	86 e2       	ldi	r24, 0x26	; 38
     53a:	95 e0       	ldi	r25, 0x05	; 5
     53c:	5d d3       	rcall	.+1722   	; 0xbf8 <Buzzer_makeHertz>
     53e:	2f ef       	ldi	r18, 0xFF	; 255
     540:	81 ee       	ldi	r24, 0xE1	; 225
     542:	94 e0       	ldi	r25, 0x04	; 4
     544:	21 50       	subi	r18, 0x01	; 1
     546:	80 40       	sbci	r24, 0x00	; 0
     548:	90 40       	sbci	r25, 0x00	; 0
     54a:	e1 f7       	brne	.-8      	; 0x544 <Sound_Start+0x3e>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <Sound_Start+0x48>
	_delay_ms(100);
	Buzzer_soundOff();
     54e:	00 00       	nop
     550:	7d c3       	rjmp	.+1786   	; 0xc4c <Buzzer_soundOff>
     552:	08 95       	ret

00000554 <Sound_End>:
}

void Sound_End()
{
	Buzzer_soundOn();
     554:	75 d3       	rcall	.+1770   	; 0xc40 <Buzzer_soundOn>
	Buzzer_makeHertz(1318);
     556:	86 e2       	ldi	r24, 0x26	; 38
     558:	95 e0       	ldi	r25, 0x05	; 5
     55a:	4e d3       	rcall	.+1692   	; 0xbf8 <Buzzer_makeHertz>
     55c:	2f ef       	ldi	r18, 0xFF	; 255
     55e:	81 ee       	ldi	r24, 0xE1	; 225
     560:	94 e0       	ldi	r25, 0x04	; 4
     562:	21 50       	subi	r18, 0x01	; 1
     564:	80 40       	sbci	r24, 0x00	; 0
     566:	90 40       	sbci	r25, 0x00	; 0
     568:	e1 f7       	brne	.-8      	; 0x562 <Sound_End+0xe>
     56a:	00 c0       	rjmp	.+0      	; 0x56c <Sound_End+0x18>
     56c:	00 00       	nop
	_delay_ms(100);
	Buzzer_makeHertz(1174);
     56e:	86 e9       	ldi	r24, 0x96	; 150
     570:	94 e0       	ldi	r25, 0x04	; 4
     572:	42 d3       	rcall	.+1668   	; 0xbf8 <Buzzer_makeHertz>
     574:	2f ef       	ldi	r18, 0xFF	; 255
     576:	81 ee       	ldi	r24, 0xE1	; 225
     578:	94 e0       	ldi	r25, 0x04	; 4
     57a:	21 50       	subi	r18, 0x01	; 1
     57c:	80 40       	sbci	r24, 0x00	; 0
     57e:	90 40       	sbci	r25, 0x00	; 0
     580:	e1 f7       	brne	.-8      	; 0x57a <Sound_End+0x26>
     582:	00 c0       	rjmp	.+0      	; 0x584 <Sound_End+0x30>
	_delay_ms(100);
	Buzzer_makeHertz(1046);
     584:	00 00       	nop
     586:	86 e1       	ldi	r24, 0x16	; 22
     588:	94 e0       	ldi	r25, 0x04	; 4
     58a:	36 d3       	rcall	.+1644   	; 0xbf8 <Buzzer_makeHertz>
     58c:	2f ef       	ldi	r18, 0xFF	; 255
     58e:	81 ee       	ldi	r24, 0xE1	; 225
     590:	94 e0       	ldi	r25, 0x04	; 4
     592:	21 50       	subi	r18, 0x01	; 1
     594:	80 40       	sbci	r24, 0x00	; 0
     596:	90 40       	sbci	r25, 0x00	; 0
     598:	e1 f7       	brne	.-8      	; 0x592 <Sound_End+0x3e>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <Sound_End+0x48>
	_delay_ms(100);
	Buzzer_soundOff();
     59c:	00 00       	nop
     59e:	56 c3       	rjmp	.+1708   	; 0xc4c <Buzzer_soundOff>
     5a0:	08 95       	ret

000005a2 <Model_getFanMode>:
uint8_t fanMode;

uint8_t Model_getFanMode()
{
	return fanMode;
}
     5a2:	80 91 f7 01 	lds	r24, 0x01F7	; 0x8001f7 <fanMode>
     5a6:	08 95       	ret

000005a8 <Model_setFanMode>:

void Model_setFanMode(uint8_t data)
{
	fanMode = data;
     5a8:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <fanMode>
     5ac:	08 95       	ret

000005ae <Model_getFanTime>:
uint8_t fanTime;

uint8_t Model_getFanTime()
{
	return fanTime;
}
     5ae:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <fanTime>
     5b2:	08 95       	ret

000005b4 <Model_setFanTime>:

void Model_setFanTime(uint8_t data)
{
	fanTime = data;
     5b4:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <fanTime>
     5b8:	08 95       	ret

000005ba <Model_getFanTimer_Start>:
uint8_t fanStartCheck;

uint8_t Model_getFanTimer_Start()
{
	return fanStartCheck;
}
     5ba:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <fanStartCheck>
     5be:	08 95       	ret

000005c0 <Model_setFanTimer_Start>:

void Model_setFanTimer_Start(uint8_t data)
{
	fanStartCheck = data;
     5c0:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <fanStartCheck>
     5c4:	08 95       	ret

000005c6 <Model_getFanWind>:
uint8_t fanWind;

uint8_t Model_getFanWind()
{
	return fanWind;
}
     5c6:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <fanWind>
     5ca:	08 95       	ret

000005cc <Model_setFanWind>:

void Model_setFanWind(uint8_t data)
{
	fanWind = data;
     5cc:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <fanWind>
     5d0:	08 95       	ret

000005d2 <Presenter_init>:
ï»¿#include "Presenter.h"

void Presenter_init()
{
	FND_init();
     5d2:	50 d3       	rcall	.+1696   	; 0xc74 <FND_init>
	LCD_init();
     5d4:	dd c4       	rjmp	.+2490   	; 0xf90 <LCD_init>
     5d6:	08 95       	ret

000005d8 <Preseter_dispTimerData>:
     5d8:	8f 92       	push	r8
}



void Preseter_dispTimerData(uint8_t hour,uint8_t min,uint8_t sec,uint16_t milisec)
{
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	a8 97       	sbiw	r28, 0x28	; 40
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
	static uint16_t prevmilisec = 0xff;
	
	if(milisec == prevmilisec){
     600:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <prevmilisec.2146>
     604:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <prevmilisec.2146+0x1>
     608:	82 17       	cp	r24, r18
     60a:	93 07       	cpc	r25, r19
     60c:	71 f4       	brne	.+28     	; 0x62a <Preseter_dispTimerData+0x52>
		prevmilisec = milisec/10;
     60e:	ad ec       	ldi	r26, 0xCD	; 205
     610:	bc ec       	ldi	r27, 0xCC	; 204
     612:	1f d6       	rcall	.+3134   	; 0x1252 <__umulhisi3>
     614:	96 95       	lsr	r25
     616:	87 95       	ror	r24
     618:	96 95       	lsr	r25
     61a:	87 95       	ror	r24
     61c:	96 95       	lsr	r25
     61e:	87 95       	ror	r24
     620:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <prevmilisec.2146+0x1>
     624:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <prevmilisec.2146>
     628:	6f c0       	rjmp	.+222    	; 0x708 <Preseter_dispTimerData+0x130>
     62a:	69 01       	movw	r12, r18
     62c:	e4 2e       	mov	r14, r20
     62e:	f6 2e       	mov	r15, r22
		return;
	}
	
	uint16_t clockData = 0;
	uint8_t fanWindData;
	fanWindData = Model_getFanWind();
     630:	ca df       	rcall	.-108    	; 0x5c6 <Model_getFanWind>
     632:	81 30       	cpi	r24, 0x01	; 1
	char windData[10];
	
	//LCDíë©´
	switch(fanWindData)
     634:	81 f0       	breq	.+32     	; 0x656 <Preseter_dispTimerData+0x7e>
     636:	28 f0       	brcs	.+10     	; 0x642 <Preseter_dispTimerData+0x6a>
     638:	82 30       	cpi	r24, 0x02	; 2
     63a:	b9 f0       	breq	.+46     	; 0x66a <Preseter_dispTimerData+0x92>
     63c:	83 30       	cpi	r24, 0x03	; 3
     63e:	f9 f0       	breq	.+62     	; 0x67e <Preseter_dispTimerData+0xa6>
     640:	27 c0       	rjmp	.+78     	; 0x690 <Preseter_dispTimerData+0xb8>
     642:	87 e0       	ldi	r24, 0x07	; 7
	{
		case OFF :
		strcpy(windData," OFF  ");
     644:	eb e1       	ldi	r30, 0x1B	; 27
     646:	f1 e0       	ldi	r31, 0x01	; 1
     648:	de 01       	movw	r26, r28
     64a:	11 96       	adiw	r26, 0x01	; 1
     64c:	01 90       	ld	r0, Z+
     64e:	0d 92       	st	X+, r0
     650:	8a 95       	dec	r24
     652:	e1 f7       	brne	.-8      	; 0x64c <Preseter_dispTimerData+0x74>
     654:	1d c0       	rjmp	.+58     	; 0x690 <Preseter_dispTimerData+0xb8>
		break;
     656:	87 e0       	ldi	r24, 0x07	; 7
		case WEAK :
		strcpy(windData," WEAK ");
     658:	e2 e2       	ldi	r30, 0x22	; 34
     65a:	f1 e0       	ldi	r31, 0x01	; 1
     65c:	de 01       	movw	r26, r28
     65e:	11 96       	adiw	r26, 0x01	; 1
     660:	01 90       	ld	r0, Z+
     662:	0d 92       	st	X+, r0
     664:	8a 95       	dec	r24
     666:	e1 f7       	brne	.-8      	; 0x660 <Preseter_dispTimerData+0x88>
     668:	13 c0       	rjmp	.+38     	; 0x690 <Preseter_dispTimerData+0xb8>
		break;
     66a:	87 e0       	ldi	r24, 0x07	; 7
		case NORMAL :
		strcpy(windData,"NORMAL");
     66c:	e9 eb       	ldi	r30, 0xB9	; 185
     66e:	f1 e0       	ldi	r31, 0x01	; 1
     670:	de 01       	movw	r26, r28
     672:	11 96       	adiw	r26, 0x01	; 1
     674:	01 90       	ld	r0, Z+
     676:	0d 92       	st	X+, r0
     678:	8a 95       	dec	r24
     67a:	e1 f7       	brne	.-8      	; 0x674 <Preseter_dispTimerData+0x9c>
     67c:	09 c0       	rjmp	.+18     	; 0x690 <Preseter_dispTimerData+0xb8>
		break;
     67e:	87 e0       	ldi	r24, 0x07	; 7
		case STRONG :
		strcpy(windData,"STRONG");
     680:	e8 ec       	ldi	r30, 0xC8	; 200
     682:	f1 e0       	ldi	r31, 0x01	; 1
     684:	de 01       	movw	r26, r28
     686:	11 96       	adiw	r26, 0x01	; 1
     688:	01 90       	ld	r0, Z+
     68a:	0d 92       	st	X+, r0
     68c:	8a 95       	dec	r24
     68e:	e1 f7       	brne	.-8      	; 0x688 <Preseter_dispTimerData+0xb0>
     690:	8e 01       	movw	r16, r28
		break;
	}
	
	char buff1[30];
	
	sprintf(buff1,"MINI FAN");
     692:	05 5f       	subi	r16, 0xF5	; 245
     694:	1f 4f       	sbci	r17, 0xFF	; 255
     696:	89 e0       	ldi	r24, 0x09	; 9
     698:	e9 e2       	ldi	r30, 0x29	; 41
     69a:	f1 e0       	ldi	r31, 0x01	; 1
     69c:	d8 01       	movw	r26, r16
     69e:	01 90       	ld	r0, Z+
     6a0:	0d 92       	st	X+, r0
     6a2:	8a 95       	dec	r24
     6a4:	e1 f7       	brne	.-8      	; 0x69e <Preseter_dispTimerData+0xc6>
     6a6:	a8 01       	movw	r20, r16
	LCD_writeStrXY(0,4,buff1);
     6a8:	64 e0       	ldi	r22, 0x04	; 4
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	be d4       	rcall	.+2428   	; 0x102a <LCD_writeStrXY>
     6ae:	ae 2c       	mov	r10, r14
	sprintf(buff1,"%02d:%02d & %s",min,sec,windData);
     6b0:	b1 2c       	mov	r11, r1
     6b2:	8f 2c       	mov	r8, r15
     6b4:	91 2c       	mov	r9, r1
     6b6:	ce 01       	movw	r24, r28
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	9f 93       	push	r25
     6bc:	8f 93       	push	r24
     6be:	1f 92       	push	r1
     6c0:	ef 92       	push	r14
     6c2:	1f 92       	push	r1
     6c4:	ff 92       	push	r15
     6c6:	82 e3       	ldi	r24, 0x32	; 50
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	9f 93       	push	r25
     6cc:	8f 93       	push	r24
     6ce:	1f 93       	push	r17
     6d0:	0f 93       	push	r16
     6d2:	29 d6       	rcall	.+3154   	; 0x1326 <sprintf>
     6d4:	a8 01       	movw	r20, r16
	LCD_writeStrXY(1,1,buff1);
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	a7 d4       	rcall	.+2382   	; 0x102a <LCD_writeStrXY>
     6dc:	24 e6       	ldi	r18, 0x64	; 100
     6de:	28 9d       	mul	r18, r8
	
	//FNDíë©´
	clockData = (min*100) + sec;
     6e0:	c0 01       	movw	r24, r0
     6e2:	29 9d       	mul	r18, r9
     6e4:	90 0d       	add	r25, r0
     6e6:	11 24       	eor	r1, r1
     6e8:	8a 0d       	add	r24, r10
	FND_setFndData(clockData);
     6ea:	9b 1d       	adc	r25, r11
     6ec:	f2 d3       	rcall	.+2020   	; 0xed2 <FND_setFndData>
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
	
	if(milisec/10 < 50)
     6f2:	de bf       	out	0x3e, r29	; 62
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	cd bf       	out	0x3d, r28	; 61
     6f8:	94 ef       	ldi	r25, 0xF4	; 244
     6fa:	c9 16       	cp	r12, r25
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	d9 06       	cpc	r13, r25
     700:	10 f4       	brcc	.+4      	; 0x706 <Preseter_dispTimerData+0x12e>
	{
	FND_colonOn();
     702:	f2 d3       	rcall	.+2020   	; 0xee8 <FND_colonOn>
     704:	01 c0       	rjmp	.+2      	; 0x708 <Preseter_dispTimerData+0x130>
     706:	f4 d3       	rcall	.+2024   	; 0xef0 <FND_colonOff>
	}
	else
	{
	FND_colonOff();
     708:	a8 96       	adiw	r28, 0x28	; 40
     70a:	0f b6       	in	r0, 0x3f	; 63
	}
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	bf 90       	pop	r11
     726:	af 90       	pop	r10
     728:	9f 90       	pop	r9
     72a:	8f 90       	pop	r8
     72c:	08 95       	ret

0000072e <Fan_autoInit>:
uint32_t timeTick;
uint8_t fanWindState;

void Fan_autoInit()
{
	timeTick = 0;
     72e:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <timeTick>
     732:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <timeTick+0x1>
     736:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <timeTick+0x2>
     73a:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <timeTick+0x3>
	fanWindState = Model_getFanWind();
     73e:	43 df       	rcall	.-378    	; 0x5c6 <Model_getFanWind>
     740:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <fanWindState>
     744:	08 95       	ret

00000746 <Fan_autoRun>:
}

void Fan_autoRun()
{
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
	uint8_t fanModeState = Model_getFanMode();
     74a:	2b df       	rcall	.-426    	; 0x5a2 <Model_getFanMode>
	if(fanModeState != AUTO) return;
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	09 f0       	breq	.+2      	; 0x752 <Fan_autoRun+0xc>
     750:	d9 c0       	rjmp	.+434    	; 0x904 <Fan_autoRun+0x1be>
	
	
	static uint32_t prevTime = 0;
	switch(fanWindState)
     752:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <fanWindState>
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	91 f1       	breq	.+100    	; 0x7be <Fan_autoRun+0x78>
     75a:	38 f0       	brcs	.+14     	; 0x76a <Fan_autoRun+0x24>
     75c:	82 30       	cpi	r24, 0x02	; 2
     75e:	09 f4       	brne	.+2      	; 0x762 <Fan_autoRun+0x1c>
     760:	5d c0       	rjmp	.+186    	; 0x81c <Fan_autoRun+0xd6>
     762:	83 30       	cpi	r24, 0x03	; 3
     764:	09 f4       	brne	.+2      	; 0x768 <Fan_autoRun+0x22>
     766:	88 c0       	rjmp	.+272    	; 0x878 <Fan_autoRun+0x132>
	{
		case OFF :
		Motor_Off();
     768:	b4 c0       	rjmp	.+360    	; 0x8d2 <Fan_autoRun+0x18c>
     76a:	8c d4       	rcall	.+2328   	; 0x1084 <Motor_Off>
		if(timeTick - prevTime >= 10)
     76c:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <timeTick>
     770:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <timeTick+0x1>
     774:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <timeTick+0x2>
     778:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <timeTick+0x3>
     77c:	40 91 d0 01 	lds	r20, 0x01D0	; 0x8001d0 <__data_end>
     780:	50 91 d1 01 	lds	r21, 0x01D1	; 0x8001d1 <__data_end+0x1>
     784:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <__data_end+0x2>
     788:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <__data_end+0x3>
     78c:	8c 01       	movw	r16, r24
     78e:	9d 01       	movw	r18, r26
     790:	04 1b       	sub	r16, r20
     792:	15 0b       	sbc	r17, r21
     794:	26 0b       	sbc	r18, r22
     796:	37 0b       	sbc	r19, r23
     798:	0a 30       	cpi	r16, 0x0A	; 10
     79a:	11 05       	cpc	r17, r1
     79c:	21 05       	cpc	r18, r1
     79e:	31 05       	cpc	r19, r1
     7a0:	08 f4       	brcc	.+2      	; 0x7a4 <Fan_autoRun+0x5e>
     7a2:	97 c0       	rjmp	.+302    	; 0x8d2 <Fan_autoRun+0x18c>
		{
			prevTime = timeTick;
     7a4:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
     7a8:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <__data_end+0x1>
     7ac:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <__data_end+0x2>
     7b0:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <__data_end+0x3>
			fanWindState = WEAK;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <fanWindState>
			Model_setFanWind(WEAK);
     7ba:	08 df       	rcall	.-496    	; 0x5cc <Model_setFanWind>
		}
		break;
		
		case WEAK :
		Motor_change(8);
     7bc:	8a c0       	rjmp	.+276    	; 0x8d2 <Fan_autoRun+0x18c>
     7be:	88 e0       	ldi	r24, 0x08	; 8
     7c0:	4b d4       	rcall	.+2198   	; 0x1058 <Motor_change>
		
		TCNT3 = 0;
     7c2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7c6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		if(timeTick - prevTime >= 30)
     7ca:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <timeTick>
     7ce:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <timeTick+0x1>
     7d2:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <timeTick+0x2>
     7d6:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <timeTick+0x3>
     7da:	40 91 d0 01 	lds	r20, 0x01D0	; 0x8001d0 <__data_end>
     7de:	50 91 d1 01 	lds	r21, 0x01D1	; 0x8001d1 <__data_end+0x1>
     7e2:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <__data_end+0x2>
     7e6:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <__data_end+0x3>
     7ea:	8c 01       	movw	r16, r24
     7ec:	9d 01       	movw	r18, r26
     7ee:	04 1b       	sub	r16, r20
     7f0:	15 0b       	sbc	r17, r21
     7f2:	26 0b       	sbc	r18, r22
     7f4:	37 0b       	sbc	r19, r23
     7f6:	0e 31       	cpi	r16, 0x1E	; 30
     7f8:	11 05       	cpc	r17, r1
     7fa:	21 05       	cpc	r18, r1
     7fc:	31 05       	cpc	r19, r1
     7fe:	08 f4       	brcc	.+2      	; 0x802 <Fan_autoRun+0xbc>
     800:	68 c0       	rjmp	.+208    	; 0x8d2 <Fan_autoRun+0x18c>
		{
			prevTime = timeTick;
     802:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
     806:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <__data_end+0x1>
     80a:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <__data_end+0x2>
     80e:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <__data_end+0x3>
			fanWindState = NORMAL;
     812:	82 e0       	ldi	r24, 0x02	; 2
			Model_setFanWind(NORMAL);
     814:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <fanWindState>
     818:	d9 de       	rcall	.-590    	; 0x5cc <Model_setFanWind>
		}
		
		break;
		case NORMAL :
		Motor_change(4);
     81a:	5b c0       	rjmp	.+182    	; 0x8d2 <Fan_autoRun+0x18c>
     81c:	84 e0       	ldi	r24, 0x04	; 4
     81e:	1c d4       	rcall	.+2104   	; 0x1058 <Motor_change>
		
		TCNT3 = 0;
     820:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     824:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		if(timeTick - prevTime >= 30)
     828:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <timeTick>
     82c:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <timeTick+0x1>
     830:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <timeTick+0x2>
     834:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <timeTick+0x3>
     838:	40 91 d0 01 	lds	r20, 0x01D0	; 0x8001d0 <__data_end>
     83c:	50 91 d1 01 	lds	r21, 0x01D1	; 0x8001d1 <__data_end+0x1>
     840:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <__data_end+0x2>
     844:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <__data_end+0x3>
     848:	8c 01       	movw	r16, r24
     84a:	9d 01       	movw	r18, r26
     84c:	04 1b       	sub	r16, r20
     84e:	15 0b       	sbc	r17, r21
     850:	26 0b       	sbc	r18, r22
     852:	37 0b       	sbc	r19, r23
     854:	0e 31       	cpi	r16, 0x1E	; 30
     856:	11 05       	cpc	r17, r1
     858:	21 05       	cpc	r18, r1
     85a:	31 05       	cpc	r19, r1
     85c:	d0 f1       	brcs	.+116    	; 0x8d2 <Fan_autoRun+0x18c>
		{
			prevTime = timeTick;
     85e:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
     862:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <__data_end+0x1>
     866:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <__data_end+0x2>
     86a:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <__data_end+0x3>
			fanWindState = STRONG;
     86e:	83 e0       	ldi	r24, 0x03	; 3
			Model_setFanWind(STRONG);
     870:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <fanWindState>
     874:	ab de       	rcall	.-682    	; 0x5cc <Model_setFanWind>
		}
		
		break;
		case STRONG :
		Motor_change(2);
     876:	2d c0       	rjmp	.+90     	; 0x8d2 <Fan_autoRun+0x18c>
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	ee d3       	rcall	.+2012   	; 0x1058 <Motor_change>
		
		TCNT3 = 0;
     87c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     880:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		if(timeTick - prevTime >= 30)
     884:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <timeTick>
     888:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <timeTick+0x1>
     88c:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <timeTick+0x2>
     890:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <timeTick+0x3>
     894:	40 91 d0 01 	lds	r20, 0x01D0	; 0x8001d0 <__data_end>
     898:	50 91 d1 01 	lds	r21, 0x01D1	; 0x8001d1 <__data_end+0x1>
     89c:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <__data_end+0x2>
     8a0:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <__data_end+0x3>
     8a4:	8c 01       	movw	r16, r24
     8a6:	9d 01       	movw	r18, r26
     8a8:	04 1b       	sub	r16, r20
     8aa:	15 0b       	sbc	r17, r21
     8ac:	26 0b       	sbc	r18, r22
     8ae:	37 0b       	sbc	r19, r23
     8b0:	0e 31       	cpi	r16, 0x1E	; 30
     8b2:	11 05       	cpc	r17, r1
     8b4:	21 05       	cpc	r18, r1
     8b6:	31 05       	cpc	r19, r1
     8b8:	60 f0       	brcs	.+24     	; 0x8d2 <Fan_autoRun+0x18c>
		{
			prevTime = timeTick;
     8ba:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <__data_end>
     8be:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <__data_end+0x1>
     8c2:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <__data_end+0x2>
     8c6:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <__data_end+0x3>
			fanWindState = OFF;
     8ca:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <fanWindState>
			Model_setFanWind(OFF);
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	7d de       	rcall	.-774    	; 0x5cc <Model_setFanWind>
     8d2:	8f e9       	ldi	r24, 0x9F	; 159
     8d4:	9f e0       	ldi	r25, 0x0F	; 15
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <Fan_autoRun+0x190>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <Fan_autoRun+0x196>
     8dc:	00 00       	nop
		
		break;
	}
	
	_delay_ms(1);
	timeTick++;
     8de:	80 91 fc 01 	lds	r24, 0x01FC	; 0x8001fc <timeTick>
     8e2:	90 91 fd 01 	lds	r25, 0x01FD	; 0x8001fd <timeTick+0x1>
     8e6:	a0 91 fe 01 	lds	r26, 0x01FE	; 0x8001fe <timeTick+0x2>
     8ea:	b0 91 ff 01 	lds	r27, 0x01FF	; 0x8001ff <timeTick+0x3>
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	a1 1d       	adc	r26, r1
     8f2:	b1 1d       	adc	r27, r1
     8f4:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <timeTick>
     8f8:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <timeTick+0x1>
     8fc:	a0 93 fe 01 	sts	0x01FE, r26	; 0x8001fe <timeTick+0x2>
     900:	b0 93 ff 01 	sts	0x01FF, r27	; 0x8001ff <timeTick+0x3>
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <Fan_mannualRun>:
//}

void Fan_mannualRun()
{
	uint8_t fanModeState;
	fanModeState = Model_getFanMode();
     90a:	4b de       	rcall	.-874    	; 0x5a2 <Model_getFanMode>
	if(fanModeState != MANNUAL) return;
     90c:	81 11       	cpse	r24, r1
	
	uint8_t fanWindState;
	fanWindState = Model_getFanWind();
     90e:	3a c0       	rjmp	.+116    	; 0x984 <Fan_mannualRun+0x7a>
     910:	5a de       	rcall	.-844    	; 0x5c6 <Model_getFanWind>
	switch(fanWindState)
     912:	81 30       	cpi	r24, 0x01	; 1
     914:	41 f0       	breq	.+16     	; 0x926 <Fan_mannualRun+0x1c>
     916:	28 f0       	brcs	.+10     	; 0x922 <Fan_mannualRun+0x18>
     918:	82 30       	cpi	r24, 0x02	; 2
     91a:	a9 f0       	breq	.+42     	; 0x946 <Fan_mannualRun+0x3c>
     91c:	83 30       	cpi	r24, 0x03	; 3
     91e:	19 f1       	breq	.+70     	; 0x966 <Fan_mannualRun+0x5c>
	{
		case OFF :
		Motor_Off();
     920:	08 95       	ret
		break;
     922:	b0 c3       	rjmp	.+1888   	; 0x1084 <Motor_Off>
		
		case WEAK :
		Motor_change(8);
     924:	08 95       	ret
     926:	88 e0       	ldi	r24, 0x08	; 8
     928:	97 d3       	rcall	.+1838   	; 0x1058 <Motor_change>
     92a:	2f ef       	ldi	r18, 0xFF	; 255
     92c:	81 ee       	ldi	r24, 0xE1	; 225
     92e:	94 e0       	ldi	r25, 0x04	; 4
     930:	21 50       	subi	r18, 0x01	; 1
     932:	80 40       	sbci	r24, 0x00	; 0
     934:	90 40       	sbci	r25, 0x00	; 0
     936:	e1 f7       	brne	.-8      	; 0x930 <Fan_mannualRun+0x26>
     938:	00 c0       	rjmp	.+0      	; 0x93a <Fan_mannualRun+0x30>
     93a:	00 00       	nop
		_delay_ms(100);
		TCNT3 = 0;
     93c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     940:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
		
		case NORMAL :
		Motor_change(4);
     944:	08 95       	ret
     946:	84 e0       	ldi	r24, 0x04	; 4
     948:	87 d3       	rcall	.+1806   	; 0x1058 <Motor_change>
     94a:	2f ef       	ldi	r18, 0xFF	; 255
     94c:	81 ee       	ldi	r24, 0xE1	; 225
     94e:	94 e0       	ldi	r25, 0x04	; 4
     950:	21 50       	subi	r18, 0x01	; 1
     952:	80 40       	sbci	r24, 0x00	; 0
     954:	90 40       	sbci	r25, 0x00	; 0
     956:	e1 f7       	brne	.-8      	; 0x950 <Fan_mannualRun+0x46>
     958:	00 c0       	rjmp	.+0      	; 0x95a <Fan_mannualRun+0x50>
     95a:	00 00       	nop
		_delay_ms(100);
		TCNT3 = 0;
     95c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     960:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		break;
		
		case STRONG :
		Motor_change(2);
     964:	08 95       	ret
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	77 d3       	rcall	.+1774   	; 0x1058 <Motor_change>
     96a:	2f ef       	ldi	r18, 0xFF	; 255
     96c:	81 ee       	ldi	r24, 0xE1	; 225
     96e:	94 e0       	ldi	r25, 0x04	; 4
     970:	21 50       	subi	r18, 0x01	; 1
     972:	80 40       	sbci	r24, 0x00	; 0
     974:	90 40       	sbci	r25, 0x00	; 0
     976:	e1 f7       	brne	.-8      	; 0x970 <Fan_mannualRun+0x66>
     978:	00 c0       	rjmp	.+0      	; 0x97a <Fan_mannualRun+0x70>
     97a:	00 00       	nop
		_delay_ms(100);
		TCNT3 = 0;
     97c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     980:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     984:	08 95       	ret

00000986 <FanTimer_init>:
static uint8_t sec,min,hour;
volatile bool timer_running = true;

void FanTimer_init()
{
	milisec = 0;
     986:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <milisec+0x1>
     98a:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <milisec>
	sec = 0;
     98e:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <sec>
	min = 0;
     992:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <min>
	hour = 0;
     996:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <hour>
     99a:	08 95       	ret

0000099c <FanTimer_Mode>:
}

// stateì ë°ë¥¸ timer ì´ê¸° ê° ë³ê²½ í¨ì
void FanTimer_Mode()
{
	uint8_t fanTime = Model_getFanTime();
     99c:	08 de       	rcall	.-1008   	; 0x5ae <Model_getFanTime>
	switch(fanTime)
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	89 f0       	breq	.+34     	; 0x9c4 <FanTimer_Mode+0x28>
     9a2:	28 f0       	brcs	.+10     	; 0x9ae <FanTimer_Mode+0x12>
     9a4:	82 30       	cpi	r24, 0x02	; 2
     9a6:	d1 f0       	breq	.+52     	; 0x9dc <FanTimer_Mode+0x40>
     9a8:	83 30       	cpi	r24, 0x03	; 3
     9aa:	21 f1       	breq	.+72     	; 0x9f4 <FanTimer_Mode+0x58>
     9ac:	08 95       	ret
	{
		case CON :
		milisec = 0;
     9ae:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <milisec+0x1>
     9b2:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <milisec>
		sec = 0;
     9b6:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <sec>
		min = 0;
     9ba:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <min>
		hour = 0;
     9be:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <hour>
		break;
     9c2:	08 95       	ret
		case MIN3 :
		milisec = 0;
     9c4:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <milisec+0x1>
     9c8:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <milisec>
		sec = 10;
     9cc:	8a e0       	ldi	r24, 0x0A	; 10
     9ce:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <sec>
		min = 0;
     9d2:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <min>
		hour = 0;
     9d6:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <hour>
		break;
     9da:	08 95       	ret
		case MIN5 :
		milisec = 0;
     9dc:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <milisec+0x1>
     9e0:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <milisec>
		sec = 0;
     9e4:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <sec>
		min = 5;
     9e8:	85 e0       	ldi	r24, 0x05	; 5
     9ea:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <min>
		hour = 0;
     9ee:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <hour>
		break;
     9f2:	08 95       	ret
		case MIN7 :
		milisec = 0;
     9f4:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <milisec+0x1>
     9f8:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <milisec>
		sec = 0;
     9fc:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <sec>
		min = 7;
     a00:	87 e0       	ldi	r24, 0x07	; 7
     a02:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <min>
		hour = 0;
     a06:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <hour>
     a0a:	08 95       	ret

00000a0c <FanTimer_decMilisec>:
void FanTimer_decMilisec()
{

	//if (!timer_running) return;
	
	if (milisec > 0)
     a0c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <milisec>
     a10:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <milisec+0x1>
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	31 f0       	breq	.+12     	; 0xa24 <FanTimer_decMilisec+0x18>
	{
		milisec--;
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <milisec+0x1>
     a1e:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <milisec>
     a22:	08 95       	ret
	}
	else
	{
		milisec = 999;
     a24:	87 ee       	ldi	r24, 0xE7	; 231
     a26:	93 e0       	ldi	r25, 0x03	; 3
     a28:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <milisec+0x1>
     a2c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <milisec>
		if (sec > 0)
     a30:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <sec>
     a34:	88 23       	and	r24, r24
     a36:	21 f0       	breq	.+8      	; 0xa40 <FanTimer_decMilisec+0x34>
		{
			sec--;
     a38:	81 50       	subi	r24, 0x01	; 1
     a3a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <sec>
     a3e:	08 95       	ret
		}
		else
		{
			sec = 59;
     a40:	8b e3       	ldi	r24, 0x3B	; 59
     a42:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <sec>
			if (min > 0)
     a46:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <min>
     a4a:	88 23       	and	r24, r24
     a4c:	21 f0       	breq	.+8      	; 0xa56 <FanTimer_decMilisec+0x4a>
			{
				min--;
     a4e:	81 50       	subi	r24, 0x01	; 1
     a50:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <min>
     a54:	08 95       	ret
			}
			else
			{
				min = 59;
     a56:	8b e3       	ldi	r24, 0x3B	; 59
     a58:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <min>
				if (hour > 0)
     a5c:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <hour>
     a60:	88 23       	and	r24, r24
     a62:	21 f0       	breq	.+8      	; 0xa6c <FanTimer_decMilisec+0x60>
				{
					hour--;
     a64:	81 50       	subi	r24, 0x01	; 1
     a66:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <hour>
     a6a:	08 95       	ret
				}
				else
				{
					milisec = 0;
     a6c:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <milisec+0x1>
     a70:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <milisec>
					sec = 0;
     a74:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <sec>
					min = 0;
     a78:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <min>
					hour = 0;
     a7c:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <hour>
					//timer_running = false;
					Model_setFanTimer_Start(STOP);
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	9e dd       	rcall	.-1220   	; 0x5c0 <Model_setFanTimer_Start>
					Model_setFanMode(MANNUAL);
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	90 dd       	rcall	.-1248   	; 0x5a8 <Model_setFanMode>
					Model_setFanWind(OFF);
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	a0 dd       	rcall	.-1216   	; 0x5cc <Model_setFanWind>
					Model_setFanTimer_Start(CON);
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	98 dd       	rcall	.-1232   	; 0x5c0 <Model_setFanTimer_Start>
     a90:	61 cd       	rjmp	.-1342   	; 0x554 <Sound_End>
					Sound_End();
     a92:	08 95       	ret

00000a94 <FanTimer_disp>:
     a94:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <milisec>
	}
}

void FanTimer_disp()
{
	Preseter_dispTimerData(hour,min,sec,milisec);
     a98:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <milisec+0x1>
     a9c:	40 91 d6 01 	lds	r20, 0x01D6	; 0x8001d6 <sec>
     aa0:	50 e0       	ldi	r21, 0x00	; 0
     aa2:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <min>
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <hour>
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	94 cd       	rjmp	.-1240   	; 0x5d8 <Preseter_dispTimerData>
     ab0:	08 95       	ret

00000ab2 <FanUart0_run>:




void FanUart0_run()
{
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
	if(UART0_getRxFlag())
     ab6:	84 d3       	rcall	.+1800   	; 0x11c0 <UART0_getRxFlag>
     ab8:	88 23       	and	r24, r24
     aba:	09 f4       	brne	.+2      	; 0xabe <FanUart0_run+0xc>
     abc:	64 c0       	rjmp	.+200    	; 0xb86 <FanUart0_run+0xd4>
	{
		UART0_clearRxFlag();
     abe:	5b d3       	rcall	.+1718   	; 0x1176 <UART0_clearRxFlag>
		uint8_t* rxString = UART0_readRxBuff();
     ac0:	82 d3       	rcall	.+1796   	; 0x11c6 <UART0_readRxBuff>
     ac2:	ec 01       	movw	r28, r24
		uint8_t state;
		uint8_t data;
		
		if(!strcmp((char*)rxString,"Fan_mannual\n"))
     ac4:	61 e4       	ldi	r22, 0x41	; 65
     ac6:	71 e0       	ldi	r23, 0x01	; 1
     ac8:	f5 d3       	rcall	.+2026   	; 0x12b4 <strcmp>
     aca:	89 2b       	or	r24, r25
     acc:	61 f4       	brne	.+24     	; 0xae6 <FanUart0_run+0x34>
		{
			state = MANNUAL;
			Model_setFanMode(state);
     ace:	80 e0       	ldi	r24, 0x00	; 0
     ad0:	6b dd       	rcall	.-1322   	; 0x5a8 <Model_setFanMode>
			Model_setFanWind(OFF);
     ad2:	80 e0       	ldi	r24, 0x00	; 0
			Model_setFanTimer_Start(STOP);
     ad4:	7b dd       	rcall	.-1290   	; 0x5cc <Model_setFanWind>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
			Model_setFanTime(CON);
     ad8:	73 dd       	rcall	.-1306   	; 0x5c0 <Model_setFanTimer_Start>
     ada:	80 e0       	ldi	r24, 0x00	; 0
			Sound_Mannual();
     adc:	6b dd       	rcall	.-1322   	; 0x5b4 <Model_setFanTime>
     ade:	be dc       	rcall	.-1668   	; 0x45c <Sound_Mannual>
			if(state == MANNUAL)
			{
				printf("STATE : MANNUAL\n");
     ae0:	8e e4       	ldi	r24, 0x4E	; 78
     ae2:	91 e0       	ldi	r25, 0x01	; 1
			}
		}
		if(!strcmp((char*)rxString,"Fan_Auto\n"))
     ae4:	f0 d3       	rcall	.+2016   	; 0x12c6 <puts>
     ae6:	6e e5       	ldi	r22, 0x5E	; 94
     ae8:	71 e0       	ldi	r23, 0x01	; 1
     aea:	ce 01       	movw	r24, r28
     aec:	e3 d3       	rcall	.+1990   	; 0x12b4 <strcmp>
		{
			state = AUTO;
			Model_setFanMode(AUTO);
     aee:	89 2b       	or	r24, r25
     af0:	31 f4       	brne	.+12     	; 0xafe <FanUart0_run+0x4c>
			Sound_Auto();
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	59 dd       	rcall	.-1358   	; 0x5a8 <Model_setFanMode>
			if(state == AUTO)
			{
				printf("STATE : AUTO\n");
     af6:	7f dc       	rcall	.-1794   	; 0x3f6 <Sound_Auto>
     af8:	88 e6       	ldi	r24, 0x68	; 104
     afa:	91 e0       	ldi	r25, 0x01	; 1
			}
		}
		if(!strcmp((char*)rxString,"Wind_change\n"))
     afc:	e4 d3       	rcall	.+1992   	; 0x12c6 <puts>
     afe:	65 e7       	ldi	r22, 0x75	; 117
     b00:	71 e0       	ldi	r23, 0x01	; 1
     b02:	ce 01       	movw	r24, r28
     b04:	d7 d3       	rcall	.+1966   	; 0x12b4 <strcmp>
     b06:	89 2b       	or	r24, r25
     b08:	09 f0       	breq	.+2      	; 0xb0c <FanUart0_run+0x5a>
     b0a:	3d c0       	rjmp	.+122    	; 0xb86 <FanUart0_run+0xd4>
		{
			uint8_t a = Model_getFanMode();
     b0c:	4a dd       	rcall	.-1388   	; 0x5a2 <Model_getFanMode>
     b0e:	88 23       	and	r24, r24
			if (a != MANNUAL)
     b10:	21 f0       	breq	.+8      	; 0xb1a <FanUart0_run+0x68>
			{
				printf("Do it in MANNUAL mode\n");
     b12:	82 e8       	ldi	r24, 0x82	; 130
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	d7 d3       	rcall	.+1966   	; 0x12c6 <puts>
				return;
     b18:	36 c0       	rjmp	.+108    	; 0xb86 <FanUart0_run+0xd4>
			}
			static uint8_t i=0;
			switch(i)
     b1a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <i.2124>
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	91 f0       	breq	.+36     	; 0xb46 <FanUart0_run+0x94>
     b22:	28 f0       	brcs	.+10     	; 0xb2e <FanUart0_run+0x7c>
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	d9 f0       	breq	.+54     	; 0xb5e <FanUart0_run+0xac>
			{
				case 0 :
				data = OFF;
				Sound_Wind();
     b28:	83 30       	cpi	r24, 0x03	; 3
     b2a:	29 f1       	breq	.+74     	; 0xb76 <FanUart0_run+0xc4>
				Model_setFanWind(data);
     b2c:	2c c0       	rjmp	.+88     	; 0xb86 <FanUart0_run+0xd4>
     b2e:	c9 dc       	rcall	.-1646   	; 0x4c2 <Sound_Wind>
     b30:	80 e0       	ldi	r24, 0x00	; 0
				i++;
     b32:	4c dd       	rcall	.-1384   	; 0x5cc <Model_setFanWind>
     b34:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <i.2124>
				if(data == OFF)
				{
					printf("STATE : OFF\n");
     b38:	8f 5f       	subi	r24, 0xFF	; 255
     b3a:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <i.2124>
     b3e:	88 e9       	ldi	r24, 0x98	; 152
     b40:	91 e0       	ldi	r25, 0x01	; 1
				}
				break;
				case 1 :
				data = WEAK;
				Sound_Wind();
     b42:	c1 d3       	rcall	.+1922   	; 0x12c6 <puts>
     b44:	20 c0       	rjmp	.+64     	; 0xb86 <FanUart0_run+0xd4>
				Model_setFanWind(data);
     b46:	bd dc       	rcall	.-1670   	; 0x4c2 <Sound_Wind>
     b48:	81 e0       	ldi	r24, 0x01	; 1
				i++;
     b4a:	40 dd       	rcall	.-1408   	; 0x5cc <Model_setFanWind>
     b4c:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <i.2124>
     b50:	8f 5f       	subi	r24, 0xFF	; 255
				if(data == WEAK)
				{
					printf("STATE : WEAK\n");
     b52:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <i.2124>
     b56:	84 ea       	ldi	r24, 0xA4	; 164
     b58:	91 e0       	ldi	r25, 0x01	; 1
				}
				break;
				case 2 :
				data = NORMAL;
				Sound_Wind();
     b5a:	b5 d3       	rcall	.+1898   	; 0x12c6 <puts>
     b5c:	14 c0       	rjmp	.+40     	; 0xb86 <FanUart0_run+0xd4>
				Model_setFanWind(data);
     b5e:	b1 dc       	rcall	.-1694   	; 0x4c2 <Sound_Wind>
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	34 dd       	rcall	.-1432   	; 0x5cc <Model_setFanWind>
				i++;
     b64:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <i.2124>
     b68:	8f 5f       	subi	r24, 0xFF	; 255
     b6a:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <i.2124>
				if(data == NORMAL)
				{
					printf("STATE : NORMAL\n");
     b6e:	81 eb       	ldi	r24, 0xB1	; 177
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	a9 d3       	rcall	.+1874   	; 0x12c6 <puts>
     b74:	08 c0       	rjmp	.+16     	; 0xb86 <FanUart0_run+0xd4>
     b76:	a5 dc       	rcall	.-1718   	; 0x4c2 <Sound_Wind>
				}
				break;
				case 3 :
				data = STRONG;
				Sound_Wind();
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	28 dd       	rcall	.-1456   	; 0x5cc <Model_setFanWind>
				Model_setFanWind(data);
     b7c:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <i.2124>
     b80:	80 ec       	ldi	r24, 0xC0	; 192
				i=0;
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	a0 d3       	rcall	.+1856   	; 0x12c6 <puts>
				if(data == STRONG)
				{
					printf("STATE : STRONG\n");
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <Button_init>:
ï»¿#include "button.h" //button.hë¥¼ í¬í¨íë¤ëë» , êµ¬ííê±´ .cíì¼ì


// ë²í¼ ì´ê¸°í í¨ì
void Button_init(button_t *btn, volatile uint8_t* ddr, volatile uint8_t* pin, uint8_t pinNum)
{
     b8c:	fc 01       	movw	r30, r24
     b8e:	cb 01       	movw	r24, r22
	btn->DDR = ddr;
     b90:	71 83       	std	Z+1, r23	; 0x01
     b92:	60 83       	st	Z, r22
	btn->PIN = pin;
     b94:	53 83       	std	Z+3, r21	; 0x03
     b96:	42 83       	std	Z+2, r20	; 0x02
	btn->pinNum = pinNum;
     b98:	24 83       	std	Z+4, r18	; 0x04
	btn->prevState = 1;  //í¨ìì ì ë¬ë°ì ì²«ë²ì§¸ ë§¤ê°ë³ì
     b9a:	31 e0       	ldi	r19, 0x01	; 1
     b9c:	35 83       	std	Z+5, r19	; 0x05
	
	Gpio_initPin(btn->DDR,INPUT,btn->pinNum);
     b9e:	42 2f       	mov	r20, r18
     ba0:	61 e0       	ldi	r22, 0x01	; 1
     ba2:	82 c2       	rjmp	.+1284   	; 0x10a8 <Gpio_initPin>
     ba4:	08 95       	ret

00000ba6 <Button_GetState>:
	
}

uint8_t Button_GetState(button_t* btn)
{
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	ec 01       	movw	r28, r24
	
	//uint8_t curState = *btn->PIN & (1<<btn->pinNum);
	uint8_t curState = Gpio_readPin(btn->PIN, btn->pinNum);
     bac:	6c 81       	ldd	r22, Y+4	; 0x04
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	9b 81       	ldd	r25, Y+3	; 0x03
     bb2:	b2 d2       	rcall	.+1380   	; 0x1118 <Gpio_readPin>
	if((curState == 0) && (btn->prevState == 1))
     bb4:	81 11       	cpse	r24, r1
     bb6:	0c c0       	rjmp	.+24     	; 0xbd0 <Button_GetState+0x2a>
     bb8:	9d 81       	ldd	r25, Y+5	; 0x05
     bba:	91 30       	cpi	r25, 0x01	; 1
     bbc:	49 f4       	brne	.+18     	; 0xbd0 <Button_GetState+0x2a>
     bbe:	8f e3       	ldi	r24, 0x3F	; 63
     bc0:	9c e9       	ldi	r25, 0x9C	; 156
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <Button_GetState+0x1c>
     bc6:	00 c0       	rjmp	.+0      	; 0xbc8 <Button_GetState+0x22>
     bc8:	00 00       	nop
	{
		_delay_ms(10); //debouncing code
		btn->prevState = PUSHED;
     bca:	1d 82       	std	Y+5, r1	; 0x05
		return ACT_PUSHED;
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	11 c0       	rjmp	.+34     	; 0xbf2 <Button_GetState+0x4c>
	}
	
	else if((curState != 0) && (btn->prevState == 0))
     bd0:	88 23       	and	r24, r24
     bd2:	61 f0       	breq	.+24     	; 0xbec <Button_GetState+0x46>
     bd4:	8d 81       	ldd	r24, Y+5	; 0x05
     bd6:	81 11       	cpse	r24, r1
     bd8:	0b c0       	rjmp	.+22     	; 0xbf0 <Button_GetState+0x4a>
     bda:	8f e3       	ldi	r24, 0x3F	; 63
     bdc:	9c e9       	ldi	r25, 0x9C	; 156
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <Button_GetState+0x38>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <Button_GetState+0x3e>
     be4:	00 00       	nop
	{
		_delay_ms(10);
		btn->prevState = RELEASED;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	8d 83       	std	Y+5, r24	; 0x05
		return ACT_RELEASED;
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <Button_GetState+0x4c>
	}
	return ACT_NONE;
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <Button_GetState+0x4c>
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <Buzzer_makeHertz>:
ï»¿#include "Buzzer.h"

void Buzzer_makeHertz(uint16_t hertz)
{
	if (hertz < 100) hertz = 100;
     bf8:	84 36       	cpi	r24, 0x64	; 100
     bfa:	91 05       	cpc	r25, r1
     bfc:	28 f0       	brcs	.+10     	; 0xc08 <Buzzer_makeHertz+0x10>
	else if (hertz > 5000) hertz = 5000;
     bfe:	89 38       	cpi	r24, 0x89	; 137
     c00:	23 e1       	ldi	r18, 0x13	; 19
     c02:	92 07       	cpc	r25, r18
     c04:	20 f4       	brcc	.+8      	; 0xc0e <Buzzer_makeHertz+0x16>
     c06:	05 c0       	rjmp	.+10     	; 0xc12 <Buzzer_makeHertz+0x1a>
ï»¿#include "Buzzer.h"

void Buzzer_makeHertz(uint16_t hertz)
{
	if (hertz < 100) hertz = 100;
     c08:	84 e6       	ldi	r24, 0x64	; 100
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <Buzzer_makeHertz+0x1a>
	else if (hertz > 5000) hertz = 5000;
     c0e:	88 e8       	ldi	r24, 0x88	; 136
     c10:	93 e1       	ldi	r25, 0x13	; 19
	BUZZER_ICR = (250000 / hertz) -1; //1 * x Hz, Top value
     c12:	9c 01       	movw	r18, r24
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	60 e9       	ldi	r22, 0x90	; 144
     c1a:	70 ed       	ldi	r23, 0xD0	; 208
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	fc d2       	rcall	.+1528   	; 0x121a <__divmodsi4>
     c22:	21 50       	subi	r18, 0x01	; 1
     c24:	31 09       	sbc	r19, r1
     c26:	e0 e8       	ldi	r30, 0x80	; 128
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	31 83       	std	Z+1, r19	; 0x01
     c2c:	20 83       	st	Z, r18
	BUZZER_OCR = BUZZER_ICR/2; //Duty cycle 50%
     c2e:	80 81       	ld	r24, Z
     c30:	91 81       	ldd	r25, Z+1	; 0x01
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     c3a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     c3e:	08 95       	ret

00000c40 <Buzzer_soundOn>:
}

void Buzzer_soundOn()
{
	TCCR3A |= (1<<COM3B1) | (0<<COM3B0); // non-inverting mode
     c40:	eb e8       	ldi	r30, 0x8B	; 139
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	80 62       	ori	r24, 0x20	; 32
     c48:	80 83       	st	Z, r24
     c4a:	08 95       	ret

00000c4c <Buzzer_soundOff>:
}

void Buzzer_soundOff()
{
	TCCR3A &= ~((1<<COM3B1) | (1<<COM3B0));
     c4c:	eb e8       	ldi	r30, 0x8B	; 139
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8f 7c       	andi	r24, 0xCF	; 207
     c54:	80 83       	st	Z, r24
     c56:	08 95       	ret

00000c58 <Buzzer_init>:
}

void Buzzer_init()
{
	TCCR3B |= ((0<<CS32) | (1<<CS31) | (1<<CS30)); //Pre 1/64
     c58:	ea e8       	ldi	r30, 0x8A	; 138
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	83 60       	ori	r24, 0x03	; 3
     c60:	80 83       	st	Z, r24
	TCCR3A |= (1<<WGM31)|(0 <<WGM30);
     c62:	ab e8       	ldi	r26, 0x8B	; 139
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	8c 91       	ld	r24, X
     c68:	82 60       	ori	r24, 0x02	; 2
     c6a:	8c 93       	st	X, r24
	TCCR3B |= (1<<WGM33)|(1<<WGM32);
     c6c:	80 81       	ld	r24, Z
     c6e:	88 61       	ori	r24, 0x18	; 24
     c70:	80 83       	st	Z, r24
     c72:	08 95       	ret

00000c74 <FND_init>:
uint8_t fndColonFlag = 0;
uint16_t fndData = 0;

void FND_init()
{
	FND_DIGIT_DDR |= (1<<FND_DIGIT_1)|(1<<FND_DIGIT_2)|(1<<FND_DIGIT_3)|(1<<FND_DIGIT_4);
     c74:	82 b1       	in	r24, 0x02	; 2
     c76:	82 6e       	ori	r24, 0xE2	; 226
     c78:	82 b9       	out	0x02, r24	; 2
	FND_DATA_DDR = 0xff;
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
     c7c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     c80:	08 95       	ret

00000c82 <FND_dispNum>:
}

void FND_dispNum(uint16_t fndNum){
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	2b 97       	sbiw	r28, 0x0b	; 11
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	8c 01       	movw	r16, r24
	uint8_t fndFont[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x27, 0x7f, 0x67, 0x80};
     c9c:	8b e0       	ldi	r24, 0x0B	; 11
     c9e:	e0 e1       	ldi	r30, 0x10	; 16
     ca0:	f1 e0       	ldi	r31, 0x01	; 1
     ca2:	de 01       	movw	r26, r28
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	01 90       	ld	r0, Z+
     ca8:	0d 92       	st	X+, r0
     caa:	8a 95       	dec	r24
     cac:	e1 f7       	brne	.-8      	; 0xca6 <FND_dispNum+0x24>
	
	static uint8_t fndDigitState = 0;
	
	fndDigitState = (fndDigitState+1) % 5;
     cae:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <fndDigitState.1744>
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	65 e0       	ldi	r22, 0x05	; 5
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	9c d2       	rcall	.+1336   	; 0x11f4 <__divmodhi4>
     cbc:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <fndDigitState.1744>
	
	switch(fndDigitState)
     cc0:	82 30       	cpi	r24, 0x02	; 2
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <FND_dispNum+0x44>
     cc4:	80 c0       	rjmp	.+256    	; 0xdc6 <FND_dispNum+0x144>
     cc6:	30 f4       	brcc	.+12     	; 0xcd4 <FND_dispNum+0x52>
     cc8:	88 23       	and	r24, r24
     cca:	59 f0       	breq	.+22     	; 0xce2 <FND_dispNum+0x60>
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	09 f4       	brne	.+2      	; 0xcd2 <FND_dispNum+0x50>
     cd0:	41 c0       	rjmp	.+130    	; 0xd54 <FND_dispNum+0xd2>
     cd2:	f4 c0       	rjmp	.+488    	; 0xebc <FND_dispNum+0x23a>
     cd4:	83 30       	cpi	r24, 0x03	; 3
     cd6:	09 f4       	brne	.+2      	; 0xcda <FND_dispNum+0x58>
     cd8:	ad c0       	rjmp	.+346    	; 0xe34 <FND_dispNum+0x1b2>
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	09 f4       	brne	.+2      	; 0xce0 <FND_dispNum+0x5e>
     cde:	d8 c0       	rjmp	.+432    	; 0xe90 <FND_dispNum+0x20e>
     ce0:	ed c0       	rjmp	.+474    	; 0xebc <FND_dispNum+0x23a>
	{
		case 0:
		PORTE |= ((1<<FND_DIGIT_1) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_3) | (1<<FND_DIGIT_4));
     ce2:	83 b1       	in	r24, 0x03	; 3
     ce4:	82 6e       	ori	r24, 0xE2	; 226
     ce6:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/1000%10];
     ce8:	98 01       	movw	r18, r16
     cea:	36 95       	lsr	r19
     cec:	27 95       	ror	r18
     cee:	36 95       	lsr	r19
     cf0:	27 95       	ror	r18
     cf2:	36 95       	lsr	r19
     cf4:	27 95       	ror	r18
     cf6:	a5 ec       	ldi	r26, 0xC5	; 197
     cf8:	b0 e2       	ldi	r27, 0x20	; 32
     cfa:	ab d2       	rcall	.+1366   	; 0x1252 <__umulhisi3>
     cfc:	ac 01       	movw	r20, r24
     cfe:	52 95       	swap	r21
     d00:	42 95       	swap	r20
     d02:	4f 70       	andi	r20, 0x0F	; 15
     d04:	45 27       	eor	r20, r21
     d06:	5f 70       	andi	r21, 0x0F	; 15
     d08:	45 27       	eor	r20, r21
     d0a:	9a 01       	movw	r18, r20
     d0c:	ad ec       	ldi	r26, 0xCD	; 205
     d0e:	bc ec       	ldi	r27, 0xCC	; 204
     d10:	a0 d2       	rcall	.+1344   	; 0x1252 <__umulhisi3>
     d12:	96 95       	lsr	r25
     d14:	87 95       	ror	r24
     d16:	96 95       	lsr	r25
     d18:	87 95       	ror	r24
     d1a:	96 95       	lsr	r25
     d1c:	87 95       	ror	r24
     d1e:	9c 01       	movw	r18, r24
     d20:	22 0f       	add	r18, r18
     d22:	33 1f       	adc	r19, r19
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	82 0f       	add	r24, r18
     d32:	93 1f       	adc	r25, r19
     d34:	9a 01       	movw	r18, r20
     d36:	28 1b       	sub	r18, r24
     d38:	39 0b       	sbc	r19, r25
     d3a:	e1 e0       	ldi	r30, 0x01	; 1
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	ec 0f       	add	r30, r28
     d40:	fd 1f       	adc	r31, r29
     d42:	e2 0f       	add	r30, r18
     d44:	f3 1f       	adc	r31, r19
     d46:	80 81       	ld	r24, Z
     d48:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE &= ~(1<<FND_DIGIT_1);
     d4c:	83 b1       	in	r24, 0x03	; 3
     d4e:	8d 7f       	andi	r24, 0xFD	; 253
     d50:	83 b9       	out	0x03, r24	; 3
		
		break;
     d52:	b4 c0       	rjmp	.+360    	; 0xebc <FND_dispNum+0x23a>
		
		case 1:
		PORTE |= ((1<<FND_DIGIT_1) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_3) | (1<<FND_DIGIT_4));
     d54:	83 b1       	in	r24, 0x03	; 3
     d56:	82 6e       	ori	r24, 0xE2	; 226
     d58:	83 b9       	out	0x03, r24	; 3
		PORTF = fndFont[fndNum/100%10];
     d5a:	98 01       	movw	r18, r16
     d5c:	36 95       	lsr	r19
     d5e:	27 95       	ror	r18
     d60:	36 95       	lsr	r19
     d62:	27 95       	ror	r18
     d64:	ab e7       	ldi	r26, 0x7B	; 123
     d66:	b4 e1       	ldi	r27, 0x14	; 20
     d68:	74 d2       	rcall	.+1256   	; 0x1252 <__umulhisi3>
     d6a:	ac 01       	movw	r20, r24
     d6c:	56 95       	lsr	r21
     d6e:	47 95       	ror	r20
     d70:	9a 01       	movw	r18, r20
     d72:	ad ec       	ldi	r26, 0xCD	; 205
     d74:	bc ec       	ldi	r27, 0xCC	; 204
     d76:	6d d2       	rcall	.+1242   	; 0x1252 <__umulhisi3>
     d78:	96 95       	lsr	r25
     d7a:	87 95       	ror	r24
     d7c:	96 95       	lsr	r25
     d7e:	87 95       	ror	r24
     d80:	96 95       	lsr	r25
     d82:	87 95       	ror	r24
     d84:	9c 01       	movw	r18, r24
     d86:	22 0f       	add	r18, r18
     d88:	33 1f       	adc	r19, r19
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	82 0f       	add	r24, r18
     d98:	93 1f       	adc	r25, r19
     d9a:	9a 01       	movw	r18, r20
     d9c:	28 1b       	sub	r18, r24
     d9e:	39 0b       	sbc	r19, r25
     da0:	e1 e0       	ldi	r30, 0x01	; 1
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	ec 0f       	add	r30, r28
     da6:	fd 1f       	adc	r31, r29
     da8:	e2 0f       	add	r30, r18
     daa:	f3 1f       	adc	r31, r19
     dac:	80 81       	ld	r24, Z
     dae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE &= ~(1<<FND_DIGIT_2);
     db2:	83 b1       	in	r24, 0x03	; 3
     db4:	8f 7d       	andi	r24, 0xDF	; 223
     db6:	83 b9       	out	0x03, r24	; 3
     db8:	8f e9       	ldi	r24, 0x9F	; 159
     dba:	9f e0       	ldi	r25, 0x0F	; 15
     dbc:	01 97       	sbiw	r24, 0x01	; 1
     dbe:	f1 f7       	brne	.-4      	; 0xdbc <FND_dispNum+0x13a>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <FND_dispNum+0x140>
     dc2:	00 00       	nop
     dc4:	7b c0       	rjmp	.+246    	; 0xebc <FND_dispNum+0x23a>
		_delay_ms(1);
		break;
		
		case 2:
		PORTE |= ((1<<FND_DIGIT_1) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_3) | (1<<FND_DIGIT_4));
     dc6:	83 b1       	in	r24, 0x03	; 3
     dc8:	82 6e       	ori	r24, 0xE2	; 226
		PORTF = fndFont[fndNum/10%10];
     dca:	83 b9       	out	0x03, r24	; 3
     dcc:	98 01       	movw	r18, r16
     dce:	ad ec       	ldi	r26, 0xCD	; 205
     dd0:	bc ec       	ldi	r27, 0xCC	; 204
     dd2:	3f d2       	rcall	.+1150   	; 0x1252 <__umulhisi3>
     dd4:	ac 01       	movw	r20, r24
     dd6:	56 95       	lsr	r21
     dd8:	47 95       	ror	r20
     dda:	56 95       	lsr	r21
     ddc:	47 95       	ror	r20
     dde:	56 95       	lsr	r21
     de0:	47 95       	ror	r20
     de2:	9a 01       	movw	r18, r20
     de4:	36 d2       	rcall	.+1132   	; 0x1252 <__umulhisi3>
     de6:	96 95       	lsr	r25
     de8:	87 95       	ror	r24
     dea:	96 95       	lsr	r25
     dec:	87 95       	ror	r24
     dee:	96 95       	lsr	r25
     df0:	87 95       	ror	r24
     df2:	9c 01       	movw	r18, r24
     df4:	22 0f       	add	r18, r18
     df6:	33 1f       	adc	r19, r19
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	9a 01       	movw	r18, r20
     e0a:	28 1b       	sub	r18, r24
     e0c:	39 0b       	sbc	r19, r25
     e0e:	e1 e0       	ldi	r30, 0x01	; 1
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	ec 0f       	add	r30, r28
     e14:	fd 1f       	adc	r31, r29
     e16:	e2 0f       	add	r30, r18
     e18:	f3 1f       	adc	r31, r19
     e1a:	80 81       	ld	r24, Z
     e1c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE &= ~(1<<FND_DIGIT_3);
     e20:	83 b1       	in	r24, 0x03	; 3
     e22:	8f 7b       	andi	r24, 0xBF	; 191
     e24:	83 b9       	out	0x03, r24	; 3
     e26:	8f e9       	ldi	r24, 0x9F	; 159
     e28:	9f e0       	ldi	r25, 0x0F	; 15
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <FND_dispNum+0x1a8>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <FND_dispNum+0x1ae>
     e30:	00 00       	nop
		_delay_ms(1);
		break;
		
		case 3:
		PORTE |= ((1<<FND_DIGIT_1) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_3) | (1<<FND_DIGIT_4));
     e32:	44 c0       	rjmp	.+136    	; 0xebc <FND_dispNum+0x23a>
     e34:	83 b1       	in	r24, 0x03	; 3
     e36:	82 6e       	ori	r24, 0xE2	; 226
		PORTF = fndFont[fndNum%10];
     e38:	83 b9       	out	0x03, r24	; 3
     e3a:	98 01       	movw	r18, r16
     e3c:	ad ec       	ldi	r26, 0xCD	; 205
     e3e:	bc ec       	ldi	r27, 0xCC	; 204
     e40:	08 d2       	rcall	.+1040   	; 0x1252 <__umulhisi3>
     e42:	96 95       	lsr	r25
     e44:	87 95       	ror	r24
     e46:	96 95       	lsr	r25
     e48:	87 95       	ror	r24
     e4a:	96 95       	lsr	r25
     e4c:	87 95       	ror	r24
     e4e:	9c 01       	movw	r18, r24
     e50:	22 0f       	add	r18, r18
     e52:	33 1f       	adc	r19, r19
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	82 0f       	add	r24, r18
     e62:	93 1f       	adc	r25, r19
     e64:	98 01       	movw	r18, r16
     e66:	28 1b       	sub	r18, r24
     e68:	39 0b       	sbc	r19, r25
     e6a:	e1 e0       	ldi	r30, 0x01	; 1
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	ec 0f       	add	r30, r28
     e70:	fd 1f       	adc	r31, r29
     e72:	e2 0f       	add	r30, r18
     e74:	f3 1f       	adc	r31, r19
     e76:	80 81       	ld	r24, Z
     e78:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE &= ~(1<<FND_DIGIT_4);
     e7c:	83 b1       	in	r24, 0x03	; 3
     e7e:	8f 77       	andi	r24, 0x7F	; 127
     e80:	83 b9       	out	0x03, r24	; 3
     e82:	8f e9       	ldi	r24, 0x9F	; 159
     e84:	9f e0       	ldi	r25, 0x0F	; 15
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <FND_dispNum+0x204>
     e8a:	00 c0       	rjmp	.+0      	; 0xe8c <FND_dispNum+0x20a>
     e8c:	00 00       	nop
     e8e:	16 c0       	rjmp	.+44     	; 0xebc <FND_dispNum+0x23a>
		_delay_ms(1);
		break;
		
		case 4:
		PORTE |= ((1<<FND_DIGIT_1) | (1<<FND_DIGIT_2) | (1<<FND_DIGIT_3) | (1<<FND_DIGIT_4));
     e90:	83 b1       	in	r24, 0x03	; 3
     e92:	82 6e       	ori	r24, 0xE2	; 226
     e94:	83 b9       	out	0x03, r24	; 3
		if(fndColonFlag)	PORTF = fndFont[10];
     e96:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <fndColonFlag>
     e9a:	88 23       	and	r24, r24
     e9c:	21 f0       	breq	.+8      	; 0xea6 <FND_dispNum+0x224>
     e9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     ea0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <FND_dispNum+0x228>
		else	PORTF = 0x00;
     ea6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
		PORTE &= ~(1<<FND_DIGIT_2);
     eaa:	83 b1       	in	r24, 0x03	; 3
     eac:	8f 7d       	andi	r24, 0xDF	; 223
     eae:	83 b9       	out	0x03, r24	; 3
     eb0:	8f e9       	ldi	r24, 0x9F	; 159
     eb2:	9f e0       	ldi	r25, 0x0F	; 15
     eb4:	01 97       	sbiw	r24, 0x01	; 1
     eb6:	f1 f7       	brne	.-4      	; 0xeb4 <FND_dispNum+0x232>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <FND_dispNum+0x238>
     eba:	00 00       	nop
		_delay_ms(1);
		break;
	}
}
     ebc:	2b 96       	adiw	r28, 0x0b	; 11
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	08 95       	ret

00000ed2 <FND_setFndData>:

void FND_setFndData(uint16_t data)
{
	fndData = data;
     ed2:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <fndData+0x1>
     ed6:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <fndData>
     eda:	08 95       	ret

00000edc <FND_ISR_Process>:
}

void FND_ISR_Process(){
	FND_dispNum(fndData);
     edc:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <fndData>
     ee0:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <fndData+0x1>
     ee4:	ce ce       	rjmp	.-612    	; 0xc82 <FND_dispNum>
     ee6:	08 95       	ret

00000ee8 <FND_colonOn>:
}

void FND_colonOn(){fndColonFlag = 1;}
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <fndColonFlag>
     eee:	08 95       	ret

00000ef0 <FND_colonOff>:
     ef0:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <fndColonFlag>
     ef4:	08 95       	ret

00000ef6 <GPIO_init>:
ï»¿#include "LCD.h"


void GPIO_init()
{
	Gpio_initPin(&LCD_CRL_DDR,OUTPUT,LCD_RS);
     ef6:	44 e0       	ldi	r20, 0x04	; 4
     ef8:	60 e0       	ldi	r22, 0x00	; 0
     efa:	87 e3       	ldi	r24, 0x37	; 55
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	d4 d0       	rcall	.+424    	; 0x10a8 <Gpio_initPin>
	Gpio_initPin(&LCD_CRL_DDR,OUTPUT,LCD_RW);
     f00:	46 e0       	ldi	r20, 0x06	; 6
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	87 e3       	ldi	r24, 0x37	; 55
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	cf d0       	rcall	.+414    	; 0x10a8 <Gpio_initPin>
	Gpio_initPin(&LCD_CRL_DDR,OUTPUT,LCD_E);
     f0a:	47 e0       	ldi	r20, 0x07	; 7
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	87 e3       	ldi	r24, 0x37	; 55
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	ca d0       	rcall	.+404    	; 0x10a8 <Gpio_initPin>
	Gpio_initPort(&LCD_DATA_DDR,OUTPUT);
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	84 e3       	ldi	r24, 0x34	; 52
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	bd c0       	rjmp	.+378    	; 0x1096 <Gpio_initPort>
     f1c:	08 95       	ret

00000f1e <LCD_cmdMode>:


void LCD_cmdMode()
{
	//LCD_CRL_PORT &= ~(1<<LCD_RS);
	Gpio_writePin(&LCD_CRL_PORT,LCD_RS,GPIO_PIN_RESET);
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	64 e0       	ldi	r22, 0x04	; 4
     f22:	88 e3       	ldi	r24, 0x38	; 56
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	de c0       	rjmp	.+444    	; 0x10e4 <Gpio_writePin>
     f28:	08 95       	ret

00000f2a <LCD_charMode>:
}

void LCD_charMode()
{
	//LCD_CRL_PORT |= (1<<LCD_RS);
	Gpio_writePin(&LCD_CRL_PORT,LCD_RS,GPIO_PIN_SET);
     f2a:	41 e0       	ldi	r20, 0x01	; 1
     f2c:	64 e0       	ldi	r22, 0x04	; 4
     f2e:	88 e3       	ldi	r24, 0x38	; 56
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	d8 c0       	rjmp	.+432    	; 0x10e4 <Gpio_writePin>
     f34:	08 95       	ret

00000f36 <LCD_writeMode>:
}

void LCD_writeMode()
{
	//LCD_CRL_PORT &= ~(1<<LCD_RW);
	Gpio_writePin(&LCD_CRL_PORT,LCD_RW,GPIO_PIN_RESET);
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	66 e0       	ldi	r22, 0x06	; 6
     f3a:	88 e3       	ldi	r24, 0x38	; 56
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	d2 c0       	rjmp	.+420    	; 0x10e4 <Gpio_writePin>
     f40:	08 95       	ret

00000f42 <LCD_enableHigh>:
}

void LCD_enableHigh()
{
	//LCD_CRL_PORT |= (1<<LCD_E);
	Gpio_writePin(&LCD_CRL_PORT,LCD_E,GPIO_PIN_SET);
     f42:	41 e0       	ldi	r20, 0x01	; 1
     f44:	67 e0       	ldi	r22, 0x07	; 7
     f46:	88 e3       	ldi	r24, 0x38	; 56
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	cc d0       	rcall	.+408    	; 0x10e4 <Gpio_writePin>
     f4c:	8f e9       	ldi	r24, 0x9F	; 159
     f4e:	9f e0       	ldi	r25, 0x0F	; 15
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	f1 f7       	brne	.-4      	; 0xf50 <LCD_enableHigh+0xe>
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <LCD_enableHigh+0x14>
     f56:	00 00       	nop
     f58:	08 95       	ret

00000f5a <LCD_enableLow>:
}

void LCD_enableLow()
{
	//LCD_CRL_PORT &= ~(1<<LCD_E);
	Gpio_writePin(&LCD_CRL_PORT,LCD_E,GPIO_PIN_RESET);
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	67 e0       	ldi	r22, 0x07	; 7
     f5e:	88 e3       	ldi	r24, 0x38	; 56
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	c0 d0       	rcall	.+384    	; 0x10e4 <Gpio_writePin>
     f64:	8f e9       	ldi	r24, 0x9F	; 159
     f66:	9f e0       	ldi	r25, 0x0F	; 15
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <LCD_enableLow+0xe>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <LCD_enableLow+0x14>
     f6e:	00 00       	nop
     f70:	08 95       	ret

00000f72 <LCD_writeByte>:
	_delay_ms(1);
}

void LCD_writeByte(uint8_t data)
{
	Gpio_writePort(&LCD_DATA_PORT,data);
     f72:	68 2f       	mov	r22, r24
     f74:	85 e3       	ldi	r24, 0x35	; 53
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	b2 c0       	rjmp	.+356    	; 0x10de <Gpio_writePort>
     f7a:	08 95       	ret

00000f7c <LCD_writeCmdData>:
}


//MCU -> LCD ëªë ¹ì´ ë³´ë¼ê²½ì°
void LCD_writeCmdData(uint8_t data)
{
     f7c:	cf 93       	push	r28
     f7e:	c8 2f       	mov	r28, r24
	LCD_cmdMode(); // RSí 0ì¼ë¡
     f80:	ce df       	rcall	.-100    	; 0xf1e <LCD_cmdMode>
	LCD_writeMode(); //Rwí 0ì¼ë¡
     f82:	d9 df       	rcall	.-78     	; 0xf36 <LCD_writeMode>
	LCD_enableHigh();
     f84:	de df       	rcall	.-68     	; 0xf42 <LCD_enableHigh>
	LCD_writeByte(data); //ë°ì´í° write ê³¼ì 
     f86:	8c 2f       	mov	r24, r28
     f88:	f4 df       	rcall	.-24     	; 0xf72 <LCD_writeByte>
     f8a:	e7 df       	rcall	.-50     	; 0xf5a <LCD_enableLow>
	LCD_enableLow();
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <LCD_init>:
	
}
     f90:	b2 df       	rcall	.-156    	; 0xef6 <GPIO_init>
     f92:	8f e5       	ldi	r24, 0x5F	; 95
     f94:	9a ee       	ldi	r25, 0xEA	; 234
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <LCD_init+0x6>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <LCD_init+0xc>
     f9c:	00 00       	nop

void LCD_init()
{
	GPIO_init();
	_delay_ms(15);
	LCD_writeCmdData(LCD_8BIT_FUNCTION_SET);
     f9e:	88 e3       	ldi	r24, 0x38	; 56
     fa0:	ed df       	rcall	.-38     	; 0xf7c <LCD_writeCmdData>
     fa2:	8f e1       	ldi	r24, 0x1F	; 31
     fa4:	9e e4       	ldi	r25, 0x4E	; 78
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	f1 f7       	brne	.-4      	; 0xfa6 <LCD_init+0x16>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <LCD_init+0x1c>
	_delay_ms(5);
	LCD_writeCmdData(LCD_8BIT_FUNCTION_SET);
     fac:	00 00       	nop
     fae:	88 e3       	ldi	r24, 0x38	; 56
     fb0:	e5 df       	rcall	.-54     	; 0xf7c <LCD_writeCmdData>
     fb2:	8f e9       	ldi	r24, 0x9F	; 159
     fb4:	9f e0       	ldi	r25, 0x0F	; 15
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <LCD_init+0x26>
     fba:	00 c0       	rjmp	.+0      	; 0xfbc <LCD_init+0x2c>
	_delay_ms(1);
	LCD_writeCmdData(LCD_8BIT_FUNCTION_SET);
     fbc:	00 00       	nop
     fbe:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_8BIT_FUNCTION_SET);
     fc0:	dd df       	rcall	.-70     	; 0xf7c <LCD_writeCmdData>
     fc2:	88 e3       	ldi	r24, 0x38	; 56
	LCD_writeCmdData(LCD_DISPLAY_OFF);
     fc4:	db df       	rcall	.-74     	; 0xf7c <LCD_writeCmdData>
     fc6:	88 e0       	ldi	r24, 0x08	; 8
	LCD_writeCmdData(LCD_DISPLAY_CLEAR);
     fc8:	d9 df       	rcall	.-78     	; 0xf7c <LCD_writeCmdData>
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	d7 df       	rcall	.-82     	; 0xf7c <LCD_writeCmdData>
	LCD_writeCmdData(LCD_ENTRY_MODE_SET);
     fce:	86 e0       	ldi	r24, 0x06	; 6
     fd0:	d5 df       	rcall	.-86     	; 0xf7c <LCD_writeCmdData>
     fd2:	8c e0       	ldi	r24, 0x0C	; 12
	LCD_writeCmdData(LCD_DISPLAY_ON);
     fd4:	d3 cf       	rjmp	.-90     	; 0xf7c <LCD_writeCmdData>
     fd6:	08 95       	ret

00000fd8 <LCD_writeCharData>:
     fd8:	cf 93       	push	r28
     fda:	c8 2f       	mov	r28, r24
}

//MCU -> LCD Dataë¥¼ ë³´ë¼ ê²½ì°
void LCD_writeCharData(uint8_t data)
{
	LCD_charMode(); // RSí 1ì¼ë¡
     fdc:	a6 df       	rcall	.-180    	; 0xf2a <LCD_charMode>
	LCD_writeMode(); //Rwí 0ì¼ë¡
     fde:	ab df       	rcall	.-170    	; 0xf36 <LCD_writeMode>
	LCD_enableHigh();
     fe0:	b0 df       	rcall	.-160    	; 0xf42 <LCD_enableHigh>
	LCD_writeByte(data); //ë°ì´í° write ê³¼ì 
     fe2:	8c 2f       	mov	r24, r28
     fe4:	c6 df       	rcall	.-116    	; 0xf72 <LCD_writeByte>
     fe6:	b9 df       	rcall	.-142    	; 0xf5a <LCD_enableLow>
	LCD_enableLow();
     fe8:	cf 91       	pop	r28
     fea:	08 95       	ret

00000fec <LCD_writeString>:
}
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
void LCD_writeString(char *str)
{
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	8c 01       	movw	r16, r24
	for(int i=0; str[i]; i++)
     ff6:	c0 e0       	ldi	r28, 0x00	; 0
     ff8:	d0 e0       	ldi	r29, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <__DATA_REGION_LENGTH__>
	{
		LCD_writeCharData(str[i]);
     ffc:	ed df       	rcall	.-38     	; 0xfd8 <LCD_writeCharData>
	LCD_writeByte(data); //ë°ì´í° write ê³¼ì 
	LCD_enableLow();
}
void LCD_writeString(char *str)
{
	for(int i=0; str[i]; i++)
     ffe:	21 96       	adiw	r28, 0x01	; 1
    1000:	f8 01       	movw	r30, r16
    1002:	ec 0f       	add	r30, r28
    1004:	fd 1f       	adc	r31, r29
    1006:	80 81       	ld	r24, Z
    1008:	81 11       	cpse	r24, r1
    100a:	f8 cf       	rjmp	.-16     	; 0xffc <LCD_writeString+0x10>
	{
		LCD_writeCharData(str[i]);
	}
}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	08 95       	ret

00001016 <LCD_gotoXY>:

void LCD_gotoXY(uint8_t row, uint8_t col)
{
	col%=  16 ; row %= 2;
    1016:	6f 70       	andi	r22, 0x0F	; 15
    1018:	81 70       	andi	r24, 0x01	; 1
	uint8_t lcdregisterAddress = (0x40 *row) +col;
    101a:	90 e4       	ldi	r25, 0x40	; 64
    101c:	89 9f       	mul	r24, r25
    101e:	60 0d       	add	r22, r0
    1020:	11 24       	eor	r1, r1
    1022:	86 2f       	mov	r24, r22
	uint8_t command = 0x80 +lcdregisterAddress;
	LCD_writeCmdData(command);
    1024:	80 58       	subi	r24, 0x80	; 128
    1026:	aa cf       	rjmp	.-172    	; 0xf7c <LCD_writeCmdData>
    1028:	08 95       	ret

0000102a <LCD_writeStrXY>:
}

void LCD_writeStrXY(uint8_t row,uint8_t col,char *str)
{
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ea 01       	movw	r28, r20
	LCD_gotoXY(row,col);
    1030:	f2 df       	rcall	.-28     	; 0x1016 <LCD_gotoXY>
	LCD_writeString(str);
    1032:	ce 01       	movw	r24, r28
    1034:	db df       	rcall	.-74     	; 0xfec <LCD_writeString>
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <Motor_init>:
}
void Motor_Run()
{
	 Motor_change(4);
	_delay_ms(100);
	TCNT3 = 0;
    103c:	ea e8       	ldi	r30, 0x8A	; 138
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	83 60       	ori	r24, 0x03	; 3
    1044:	80 83       	st	Z, r24
    1046:	ab e8       	ldi	r26, 0x8B	; 139
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	8c 91       	ld	r24, X
    104c:	82 60       	ori	r24, 0x02	; 2
    104e:	8c 93       	st	X, r24
    1050:	80 81       	ld	r24, Z
    1052:	88 61       	ori	r24, 0x18	; 24
    1054:	80 83       	st	Z, r24
    1056:	08 95       	ret

00001058 <Motor_change>:
    1058:	68 2f       	mov	r22, r24
    105a:	e0 e8       	ldi	r30, 0x80	; 128
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	89 ef       	ldi	r24, 0xF9	; 249
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	80 83       	st	Z, r24
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	af d0       	rcall	.+350    	; 0x11cc <__udivmodhi4>
    106e:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1072:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1076:	08 95       	ret

00001078 <Motor_On>:
}
void Motor_On()
{
	TCCR3A |= (1<<COM3A1) | (0<<COM3A0); // non-inverting mode
    1078:	eb e8       	ldi	r30, 0x8B	; 139
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	80 68       	ori	r24, 0x80	; 128
    1080:	80 83       	st	Z, r24
    1082:	08 95       	ret

00001084 <Motor_Off>:
}

void Motor_Off()
{
	TCCR3A &= ~((1<<COM3A1) | (1<<COM3A0));
    1084:	eb e8       	ldi	r30, 0x8B	; 139
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8f 73       	andi	r24, 0x3F	; 63
    108c:	80 83       	st	Z, r24
    108e:	08 95       	ret

00001090 <main>:



int main(void)
{
	apMain_init();
    1090:	95 d8       	rcall	.-3798   	; 0x1bc <apMain_init>
	while (1)
	{	
		apMain_run();		
    1092:	ad d8       	rcall	.-3750   	; 0x1ee <apMain_run>
    1094:	fe cf       	rjmp	.-4      	; 0x1092 <main+0x2>

00001096 <Gpio_initPort>:
    1096:	61 11       	cpse	r22, r1
}

uint8_t Gpio_readPort(volatile uint8_t* PIN)
{
	return *PIN;	
}
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <Gpio_initPort+0xc>
    109a:	2f ef       	ldi	r18, 0xFF	; 255
    109c:	fc 01       	movw	r30, r24
    109e:	20 83       	st	Z, r18
    10a0:	08 95       	ret
    10a2:	fc 01       	movw	r30, r24
    10a4:	10 82       	st	Z, r1
    10a6:	08 95       	ret

000010a8 <Gpio_initPin>:
    10a8:	61 11       	cpse	r22, r1
    10aa:	0c c0       	rjmp	.+24     	; 0x10c4 <Gpio_initPin+0x1c>
    10ac:	fc 01       	movw	r30, r24
    10ae:	50 81       	ld	r21, Z
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <Gpio_initPin+0x12>
    10b6:	22 0f       	add	r18, r18
    10b8:	33 1f       	adc	r19, r19
    10ba:	4a 95       	dec	r20
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <Gpio_initPin+0xe>
    10be:	25 2b       	or	r18, r21
    10c0:	20 83       	st	Z, r18
    10c2:	08 95       	ret
    10c4:	fc 01       	movw	r30, r24
    10c6:	50 81       	ld	r21, Z
    10c8:	21 e0       	ldi	r18, 0x01	; 1
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <Gpio_initPin+0x2a>
    10ce:	22 0f       	add	r18, r18
    10d0:	33 1f       	adc	r19, r19
    10d2:	4a 95       	dec	r20
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <Gpio_initPin+0x26>
    10d6:	20 95       	com	r18
    10d8:	25 23       	and	r18, r21
    10da:	20 83       	st	Z, r18
    10dc:	08 95       	ret

000010de <Gpio_writePort>:
    10de:	fc 01       	movw	r30, r24
    10e0:	60 83       	st	Z, r22
    10e2:	08 95       	ret

000010e4 <Gpio_writePin>:
    10e4:	fc 01       	movw	r30, r24
    10e6:	41 30       	cpi	r20, 0x01	; 1
    10e8:	59 f4       	brne	.+22     	; 0x1100 <__stack+0x1>
    10ea:	20 81       	ld	r18, Z
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <Gpio_writePin+0x12>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	6a 95       	dec	r22
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <Gpio_writePin+0xe>
    10fa:	82 2b       	or	r24, r18
    10fc:	80 83       	st	Z, r24
    10fe:	08 95       	ret
    1100:	90 81       	ld	r25, Z
    1102:	21 e0       	ldi	r18, 0x01	; 1
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	02 c0       	rjmp	.+4      	; 0x110c <__stack+0xd>
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	6a 95       	dec	r22
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <__stack+0x9>
    1110:	20 95       	com	r18
    1112:	29 23       	and	r18, r25
    1114:	20 83       	st	Z, r18
    1116:	08 95       	ret

00001118 <Gpio_readPin>:

uint8_t Gpio_readPin(volatile uint8_t* PIN, uint8_t pinNum){
	return ((*PIN & (1<<pinNum)) != 0);
    1118:	fc 01       	movw	r30, r24
    111a:	80 81       	ld	r24, Z
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <Gpio_readPin+0xc>
    1120:	95 95       	asr	r25
    1122:	87 95       	ror	r24
    1124:	6a 95       	dec	r22
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <Gpio_readPin+0x8>
	//pushed ë©´ ë°íê°ì 0ì ë°ìì¼ íë¤ (pull up ì í­ì´ì´ì) ë°ë¼ì Falseê°ì¸ 0ì return
	
    1128:	81 70       	andi	r24, 0x01	; 1
    112a:	08 95       	ret

0000112c <Timer0_init>:
ï»¿#include "Timer.h"

void Timer0_init() // 1ms overflow interrupty , for FND display
{
	TCCR0 |= ((1<<CS02) | (0<<CS01) | (1<<CS00)); // 128 prescaler
    112c:	83 b7       	in	r24, 0x33	; 51
    112e:	85 60       	ori	r24, 0x05	; 5
    1130:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);						//TiMSK Timer/Counter0 overflow interrupt enable
    1132:	87 b7       	in	r24, 0x37	; 55
    1134:	81 60       	ori	r24, 0x01	; 1
    1136:	87 bf       	out	0x37, r24	; 55
	TCNT0 = 130;
    1138:	82 e8       	ldi	r24, 0x82	; 130
    113a:	82 bf       	out	0x32, r24	; 50
    113c:	08 95       	ret

0000113e <Timer2_init>:
}

//Timer/Counter 2 1/64 pre 1ms period interrupt, CTC mode
void Timer2_init()
{
	TCCR2 |= ((0<<CS22) | (1<<CS21) | (1<<CS20)); // 64 prescaler 
    113e:	85 b5       	in	r24, 0x25	; 37
    1140:	83 60       	ori	r24, 0x03	; 3
    1142:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<OCIE2);						//TiMSK Timer/Counter0 overflow interrupt enable
    1144:	87 b7       	in	r24, 0x37	; 55
    1146:	80 68       	ori	r24, 0x80	; 128
    1148:	87 bf       	out	0x37, r24	; 55
	//CTC
	TCCR2 |= ((1<<WGM21) | (0<<WGM20));
    114a:	85 b5       	in	r24, 0x25	; 37
    114c:	88 60       	ori	r24, 0x08	; 8
    114e:	85 bd       	out	0x25, r24	; 37
	OCR2 = 250-1;
    1150:	89 ef       	ldi	r24, 0xF9	; 249
    1152:	83 bd       	out	0x23, r24	; 35
    1154:	08 95       	ret

00001156 <UART0_init>:
	if(!(UCSR0A & (1<<RXC0)))
	{
		return 0; //Rx Dataê° ìì¼ë©´ 0
	}
	return 1; // ìì¼ë©´ 1
}
    1156:	8a b1       	in	r24, 0x0a	; 10
    1158:	88 61       	ori	r24, 0x18	; 24
    115a:	8a b9       	out	0x0a, r24	; 10
    115c:	8b b1       	in	r24, 0x0b	; 11
    115e:	82 60       	ori	r24, 0x02	; 2
    1160:	8b b9       	out	0x0b, r24	; 11
    1162:	8f ec       	ldi	r24, 0xCF	; 207
    1164:	89 b9       	out	0x09, r24	; 9
    1166:	8a b1       	in	r24, 0x0a	; 10
    1168:	80 68       	ori	r24, 0x80	; 128
    116a:	8a b9       	out	0x0a, r24	; 10
    116c:	08 95       	ret

0000116e <UART0_Transmit>:
    116e:	5d 9b       	sbis	0x0b, 5	; 11
    1170:	fe cf       	rjmp	.-4      	; 0x116e <UART0_Transmit>
    1172:	8c b9       	out	0x0c, r24	; 12
    1174:	08 95       	ret

00001176 <UART0_clearRxFlag>:

void UART0_clearRxFlag()
{
	uart0RxFlag = 0;
    1176:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <uart0RxFlag>
    117a:	08 95       	ret

0000117c <UART0_setRxFlag>:
}

void UART0_setRxFlag()
{
	uart0RxFlag = 1;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <uart0RxFlag>
    1182:	08 95       	ret

00001184 <UART0_ISR_Process>:
}

void UART0_ISR_Process()
{
	static uint8_t uart0RxTail = 0;
	uint8_t rx0Data = UDR0;
    1184:	9c b1       	in	r25, 0x0c	; 12

	if(rx0Data == '\n')
    1186:	9a 30       	cpi	r25, 0x0A	; 10
    1188:	81 f4       	brne	.+32     	; 0x11aa <UART0_ISR_Process+0x26>
	{
		uart0Rxbuff[uart0RxTail] = rx0Data;
    118a:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <uart0RxTail.1747>
    118e:	ae 2f       	mov	r26, r30
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	a0 50       	subi	r26, 0x00	; 0
    1194:	be 4f       	sbci	r27, 0xFE	; 254
    1196:	9c 93       	st	X, r25
		uart0RxTail++;
    1198:	ef 5f       	subi	r30, 0xFF	; 255
		uart0Rxbuff[uart0RxTail] = 0;
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	e0 50       	subi	r30, 0x00	; 0
    119e:	fe 4f       	sbci	r31, 0xFE	; 254
    11a0:	10 82       	st	Z, r1
		uart0RxTail = 0;
    11a2:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <uart0RxTail.1747>
		UART0_setRxFlag();
    11a6:	ea cf       	rjmp	.-44     	; 0x117c <UART0_setRxFlag>
    11a8:	08 95       	ret
	}
	else
	{
		uart0Rxbuff[uart0RxTail] = rx0Data;
    11aa:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <uart0RxTail.1747>
    11ae:	e8 2f       	mov	r30, r24
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	e0 50       	subi	r30, 0x00	; 0
    11b4:	fe 4f       	sbci	r31, 0xFE	; 254
    11b6:	90 83       	st	Z, r25
		uart0RxTail++;
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <uart0RxTail.1747>
    11be:	08 95       	ret

000011c0 <UART0_getRxFlag>:
}

uint8_t UART0_getRxFlag()
{
	return uart0RxFlag;
}
    11c0:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <uart0RxFlag>
    11c4:	08 95       	ret

000011c6 <UART0_readRxBuff>:

uint8_t * UART0_readRxBuff()
{
	return uart0Rxbuff;
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	92 e0       	ldi	r25, 0x02	; 2
    11ca:	08 95       	ret

000011cc <__udivmodhi4>:
    11cc:	aa 1b       	sub	r26, r26
    11ce:	bb 1b       	sub	r27, r27
    11d0:	51 e1       	ldi	r21, 0x11	; 17
    11d2:	07 c0       	rjmp	.+14     	; 0x11e2 <__udivmodhi4_ep>

000011d4 <__udivmodhi4_loop>:
    11d4:	aa 1f       	adc	r26, r26
    11d6:	bb 1f       	adc	r27, r27
    11d8:	a6 17       	cp	r26, r22
    11da:	b7 07       	cpc	r27, r23
    11dc:	10 f0       	brcs	.+4      	; 0x11e2 <__udivmodhi4_ep>
    11de:	a6 1b       	sub	r26, r22
    11e0:	b7 0b       	sbc	r27, r23

000011e2 <__udivmodhi4_ep>:
    11e2:	88 1f       	adc	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	5a 95       	dec	r21
    11e8:	a9 f7       	brne	.-22     	; 0x11d4 <__udivmodhi4_loop>
    11ea:	80 95       	com	r24
    11ec:	90 95       	com	r25
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	08 95       	ret

000011f4 <__divmodhi4>:
    11f4:	97 fb       	bst	r25, 7
    11f6:	07 2e       	mov	r0, r23
    11f8:	16 f4       	brtc	.+4      	; 0x11fe <__divmodhi4+0xa>
    11fa:	00 94       	com	r0
    11fc:	06 d0       	rcall	.+12     	; 0x120a <__divmodhi4_neg1>
    11fe:	77 fd       	sbrc	r23, 7
    1200:	08 d0       	rcall	.+16     	; 0x1212 <__divmodhi4_neg2>
    1202:	e4 df       	rcall	.-56     	; 0x11cc <__udivmodhi4>
    1204:	07 fc       	sbrc	r0, 7
    1206:	05 d0       	rcall	.+10     	; 0x1212 <__divmodhi4_neg2>
    1208:	3e f4       	brtc	.+14     	; 0x1218 <__divmodhi4_exit>

0000120a <__divmodhi4_neg1>:
    120a:	90 95       	com	r25
    120c:	81 95       	neg	r24
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	08 95       	ret

00001212 <__divmodhi4_neg2>:
    1212:	70 95       	com	r23
    1214:	61 95       	neg	r22
    1216:	7f 4f       	sbci	r23, 0xFF	; 255

00001218 <__divmodhi4_exit>:
    1218:	08 95       	ret

0000121a <__divmodsi4>:
    121a:	05 2e       	mov	r0, r21
    121c:	97 fb       	bst	r25, 7
    121e:	16 f4       	brtc	.+4      	; 0x1224 <__divmodsi4+0xa>
    1220:	00 94       	com	r0
    1222:	0f d0       	rcall	.+30     	; 0x1242 <__negsi2>
    1224:	57 fd       	sbrc	r21, 7
    1226:	05 d0       	rcall	.+10     	; 0x1232 <__divmodsi4_neg2>
    1228:	23 d0       	rcall	.+70     	; 0x1270 <__udivmodsi4>
    122a:	07 fc       	sbrc	r0, 7
    122c:	02 d0       	rcall	.+4      	; 0x1232 <__divmodsi4_neg2>
    122e:	46 f4       	brtc	.+16     	; 0x1240 <__divmodsi4_exit>
    1230:	08 c0       	rjmp	.+16     	; 0x1242 <__negsi2>

00001232 <__divmodsi4_neg2>:
    1232:	50 95       	com	r21
    1234:	40 95       	com	r20
    1236:	30 95       	com	r19
    1238:	21 95       	neg	r18
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	4f 4f       	sbci	r20, 0xFF	; 255
    123e:	5f 4f       	sbci	r21, 0xFF	; 255

00001240 <__divmodsi4_exit>:
    1240:	08 95       	ret

00001242 <__negsi2>:
    1242:	90 95       	com	r25
    1244:	80 95       	com	r24
    1246:	70 95       	com	r23
    1248:	61 95       	neg	r22
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	08 95       	ret

00001252 <__umulhisi3>:
    1252:	a2 9f       	mul	r26, r18
    1254:	b0 01       	movw	r22, r0
    1256:	b3 9f       	mul	r27, r19
    1258:	c0 01       	movw	r24, r0
    125a:	a3 9f       	mul	r26, r19
    125c:	70 0d       	add	r23, r0
    125e:	81 1d       	adc	r24, r1
    1260:	11 24       	eor	r1, r1
    1262:	91 1d       	adc	r25, r1
    1264:	b2 9f       	mul	r27, r18
    1266:	70 0d       	add	r23, r0
    1268:	81 1d       	adc	r24, r1
    126a:	11 24       	eor	r1, r1
    126c:	91 1d       	adc	r25, r1
    126e:	08 95       	ret

00001270 <__udivmodsi4>:
    1270:	a1 e2       	ldi	r26, 0x21	; 33
    1272:	1a 2e       	mov	r1, r26
    1274:	aa 1b       	sub	r26, r26
    1276:	bb 1b       	sub	r27, r27
    1278:	fd 01       	movw	r30, r26
    127a:	0d c0       	rjmp	.+26     	; 0x1296 <__udivmodsi4_ep>

0000127c <__udivmodsi4_loop>:
    127c:	aa 1f       	adc	r26, r26
    127e:	bb 1f       	adc	r27, r27
    1280:	ee 1f       	adc	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	a2 17       	cp	r26, r18
    1286:	b3 07       	cpc	r27, r19
    1288:	e4 07       	cpc	r30, r20
    128a:	f5 07       	cpc	r31, r21
    128c:	20 f0       	brcs	.+8      	; 0x1296 <__udivmodsi4_ep>
    128e:	a2 1b       	sub	r26, r18
    1290:	b3 0b       	sbc	r27, r19
    1292:	e4 0b       	sbc	r30, r20
    1294:	f5 0b       	sbc	r31, r21

00001296 <__udivmodsi4_ep>:
    1296:	66 1f       	adc	r22, r22
    1298:	77 1f       	adc	r23, r23
    129a:	88 1f       	adc	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	1a 94       	dec	r1
    12a0:	69 f7       	brne	.-38     	; 0x127c <__udivmodsi4_loop>
    12a2:	60 95       	com	r22
    12a4:	70 95       	com	r23
    12a6:	80 95       	com	r24
    12a8:	90 95       	com	r25
    12aa:	9b 01       	movw	r18, r22
    12ac:	ac 01       	movw	r20, r24
    12ae:	bd 01       	movw	r22, r26
    12b0:	cf 01       	movw	r24, r30
    12b2:	08 95       	ret

000012b4 <strcmp>:
    12b4:	fb 01       	movw	r30, r22
    12b6:	dc 01       	movw	r26, r24
    12b8:	8d 91       	ld	r24, X+
    12ba:	01 90       	ld	r0, Z+
    12bc:	80 19       	sub	r24, r0
    12be:	01 10       	cpse	r0, r1
    12c0:	d9 f3       	breq	.-10     	; 0x12b8 <strcmp+0x4>
    12c2:	99 0b       	sbc	r25, r25
    12c4:	08 95       	ret

000012c6 <puts>:
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <__iob+0x2>
    12d2:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <__iob+0x3>
    12d6:	23 81       	ldd	r18, Z+3	; 0x03
    12d8:	21 ff       	sbrs	r18, 1
    12da:	1b c0       	rjmp	.+54     	; 0x1312 <puts+0x4c>
    12dc:	8c 01       	movw	r16, r24
    12de:	d0 e0       	ldi	r29, 0x00	; 0
    12e0:	c0 e0       	ldi	r28, 0x00	; 0
    12e2:	f8 01       	movw	r30, r16
    12e4:	81 91       	ld	r24, Z+
    12e6:	8f 01       	movw	r16, r30
    12e8:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <__iob+0x2>
    12ec:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <__iob+0x3>
    12f0:	db 01       	movw	r26, r22
    12f2:	18 96       	adiw	r26, 0x08	; 8
    12f4:	ed 91       	ld	r30, X+
    12f6:	fc 91       	ld	r31, X
    12f8:	19 97       	sbiw	r26, 0x09	; 9
    12fa:	88 23       	and	r24, r24
    12fc:	31 f0       	breq	.+12     	; 0x130a <puts+0x44>
    12fe:	09 95       	icall
    1300:	89 2b       	or	r24, r25
    1302:	79 f3       	breq	.-34     	; 0x12e2 <puts+0x1c>
    1304:	df ef       	ldi	r29, 0xFF	; 255
    1306:	cf ef       	ldi	r28, 0xFF	; 255
    1308:	ec cf       	rjmp	.-40     	; 0x12e2 <puts+0x1c>
    130a:	8a e0       	ldi	r24, 0x0A	; 10
    130c:	09 95       	icall
    130e:	89 2b       	or	r24, r25
    1310:	19 f0       	breq	.+6      	; 0x1318 <puts+0x52>
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	9f ef       	ldi	r25, 0xFF	; 255
    1316:	02 c0       	rjmp	.+4      	; 0x131c <puts+0x56>
    1318:	8d 2f       	mov	r24, r29
    131a:	9c 2f       	mov	r25, r28
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	08 95       	ret

00001326 <sprintf>:
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	2e 97       	sbiw	r28, 0x0e	; 14
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	0d 89       	ldd	r16, Y+21	; 0x15
    1340:	1e 89       	ldd	r17, Y+22	; 0x16
    1342:	86 e0       	ldi	r24, 0x06	; 6
    1344:	8c 83       	std	Y+4, r24	; 0x04
    1346:	1a 83       	std	Y+2, r17	; 0x02
    1348:	09 83       	std	Y+1, r16	; 0x01
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	9f e7       	ldi	r25, 0x7F	; 127
    134e:	9e 83       	std	Y+6, r25	; 0x06
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	ae 01       	movw	r20, r28
    1354:	47 5e       	subi	r20, 0xE7	; 231
    1356:	5f 4f       	sbci	r21, 0xFF	; 255
    1358:	6f 89       	ldd	r22, Y+23	; 0x17
    135a:	78 8d       	ldd	r23, Y+24	; 0x18
    135c:	ce 01       	movw	r24, r28
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	10 d0       	rcall	.+32     	; 0x1382 <vfprintf>
    1362:	ef 81       	ldd	r30, Y+7	; 0x07
    1364:	f8 85       	ldd	r31, Y+8	; 0x08
    1366:	e0 0f       	add	r30, r16
    1368:	f1 1f       	adc	r31, r17
    136a:	10 82       	st	Z, r1
    136c:	2e 96       	adiw	r28, 0x0e	; 14
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	de bf       	out	0x3e, r29	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	cd bf       	out	0x3d, r28	; 61
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	08 95       	ret

00001382 <vfprintf>:
    1382:	2f 92       	push	r2
    1384:	3f 92       	push	r3
    1386:	4f 92       	push	r4
    1388:	5f 92       	push	r5
    138a:	6f 92       	push	r6
    138c:	7f 92       	push	r7
    138e:	8f 92       	push	r8
    1390:	9f 92       	push	r9
    1392:	af 92       	push	r10
    1394:	bf 92       	push	r11
    1396:	cf 92       	push	r12
    1398:	df 92       	push	r13
    139a:	ef 92       	push	r14
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	2b 97       	sbiw	r28, 0x0b	; 11
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	6c 01       	movw	r12, r24
    13b8:	7b 01       	movw	r14, r22
    13ba:	8a 01       	movw	r16, r20
    13bc:	fc 01       	movw	r30, r24
    13be:	17 82       	std	Z+7, r1	; 0x07
    13c0:	16 82       	std	Z+6, r1	; 0x06
    13c2:	83 81       	ldd	r24, Z+3	; 0x03
    13c4:	81 ff       	sbrs	r24, 1
    13c6:	bf c1       	rjmp	.+894    	; 0x1746 <vfprintf+0x3c4>
    13c8:	ce 01       	movw	r24, r28
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	3c 01       	movw	r6, r24
    13ce:	f6 01       	movw	r30, r12
    13d0:	93 81       	ldd	r25, Z+3	; 0x03
    13d2:	f7 01       	movw	r30, r14
    13d4:	93 fd       	sbrc	r25, 3
    13d6:	85 91       	lpm	r24, Z+
    13d8:	93 ff       	sbrs	r25, 3
    13da:	81 91       	ld	r24, Z+
    13dc:	7f 01       	movw	r14, r30
    13de:	88 23       	and	r24, r24
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <vfprintf+0x62>
    13e2:	ad c1       	rjmp	.+858    	; 0x173e <vfprintf+0x3bc>
    13e4:	85 32       	cpi	r24, 0x25	; 37
    13e6:	39 f4       	brne	.+14     	; 0x13f6 <vfprintf+0x74>
    13e8:	93 fd       	sbrc	r25, 3
    13ea:	85 91       	lpm	r24, Z+
    13ec:	93 ff       	sbrs	r25, 3
    13ee:	81 91       	ld	r24, Z+
    13f0:	7f 01       	movw	r14, r30
    13f2:	85 32       	cpi	r24, 0x25	; 37
    13f4:	21 f4       	brne	.+8      	; 0x13fe <vfprintf+0x7c>
    13f6:	b6 01       	movw	r22, r12
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	d6 d1       	rcall	.+940    	; 0x17a8 <fputc>
    13fc:	e8 cf       	rjmp	.-48     	; 0x13ce <vfprintf+0x4c>
    13fe:	91 2c       	mov	r9, r1
    1400:	21 2c       	mov	r2, r1
    1402:	31 2c       	mov	r3, r1
    1404:	ff e1       	ldi	r31, 0x1F	; 31
    1406:	f3 15       	cp	r31, r3
    1408:	d8 f0       	brcs	.+54     	; 0x1440 <vfprintf+0xbe>
    140a:	8b 32       	cpi	r24, 0x2B	; 43
    140c:	79 f0       	breq	.+30     	; 0x142c <vfprintf+0xaa>
    140e:	38 f4       	brcc	.+14     	; 0x141e <vfprintf+0x9c>
    1410:	80 32       	cpi	r24, 0x20	; 32
    1412:	79 f0       	breq	.+30     	; 0x1432 <vfprintf+0xb0>
    1414:	83 32       	cpi	r24, 0x23	; 35
    1416:	a1 f4       	brne	.+40     	; 0x1440 <vfprintf+0xbe>
    1418:	23 2d       	mov	r18, r3
    141a:	20 61       	ori	r18, 0x10	; 16
    141c:	1d c0       	rjmp	.+58     	; 0x1458 <vfprintf+0xd6>
    141e:	8d 32       	cpi	r24, 0x2D	; 45
    1420:	61 f0       	breq	.+24     	; 0x143a <vfprintf+0xb8>
    1422:	80 33       	cpi	r24, 0x30	; 48
    1424:	69 f4       	brne	.+26     	; 0x1440 <vfprintf+0xbe>
    1426:	23 2d       	mov	r18, r3
    1428:	21 60       	ori	r18, 0x01	; 1
    142a:	16 c0       	rjmp	.+44     	; 0x1458 <vfprintf+0xd6>
    142c:	83 2d       	mov	r24, r3
    142e:	82 60       	ori	r24, 0x02	; 2
    1430:	38 2e       	mov	r3, r24
    1432:	e3 2d       	mov	r30, r3
    1434:	e4 60       	ori	r30, 0x04	; 4
    1436:	3e 2e       	mov	r3, r30
    1438:	2a c0       	rjmp	.+84     	; 0x148e <vfprintf+0x10c>
    143a:	f3 2d       	mov	r31, r3
    143c:	f8 60       	ori	r31, 0x08	; 8
    143e:	1d c0       	rjmp	.+58     	; 0x147a <vfprintf+0xf8>
    1440:	37 fc       	sbrc	r3, 7
    1442:	2d c0       	rjmp	.+90     	; 0x149e <vfprintf+0x11c>
    1444:	20 ed       	ldi	r18, 0xD0	; 208
    1446:	28 0f       	add	r18, r24
    1448:	2a 30       	cpi	r18, 0x0A	; 10
    144a:	40 f0       	brcs	.+16     	; 0x145c <vfprintf+0xda>
    144c:	8e 32       	cpi	r24, 0x2E	; 46
    144e:	b9 f4       	brne	.+46     	; 0x147e <vfprintf+0xfc>
    1450:	36 fc       	sbrc	r3, 6
    1452:	75 c1       	rjmp	.+746    	; 0x173e <vfprintf+0x3bc>
    1454:	23 2d       	mov	r18, r3
    1456:	20 64       	ori	r18, 0x40	; 64
    1458:	32 2e       	mov	r3, r18
    145a:	19 c0       	rjmp	.+50     	; 0x148e <vfprintf+0x10c>
    145c:	36 fe       	sbrs	r3, 6
    145e:	06 c0       	rjmp	.+12     	; 0x146c <vfprintf+0xea>
    1460:	8a e0       	ldi	r24, 0x0A	; 10
    1462:	98 9e       	mul	r9, r24
    1464:	20 0d       	add	r18, r0
    1466:	11 24       	eor	r1, r1
    1468:	92 2e       	mov	r9, r18
    146a:	11 c0       	rjmp	.+34     	; 0x148e <vfprintf+0x10c>
    146c:	ea e0       	ldi	r30, 0x0A	; 10
    146e:	2e 9e       	mul	r2, r30
    1470:	20 0d       	add	r18, r0
    1472:	11 24       	eor	r1, r1
    1474:	22 2e       	mov	r2, r18
    1476:	f3 2d       	mov	r31, r3
    1478:	f0 62       	ori	r31, 0x20	; 32
    147a:	3f 2e       	mov	r3, r31
    147c:	08 c0       	rjmp	.+16     	; 0x148e <vfprintf+0x10c>
    147e:	8c 36       	cpi	r24, 0x6C	; 108
    1480:	21 f4       	brne	.+8      	; 0x148a <vfprintf+0x108>
    1482:	83 2d       	mov	r24, r3
    1484:	80 68       	ori	r24, 0x80	; 128
    1486:	38 2e       	mov	r3, r24
    1488:	02 c0       	rjmp	.+4      	; 0x148e <vfprintf+0x10c>
    148a:	88 36       	cpi	r24, 0x68	; 104
    148c:	41 f4       	brne	.+16     	; 0x149e <vfprintf+0x11c>
    148e:	f7 01       	movw	r30, r14
    1490:	93 fd       	sbrc	r25, 3
    1492:	85 91       	lpm	r24, Z+
    1494:	93 ff       	sbrs	r25, 3
    1496:	81 91       	ld	r24, Z+
    1498:	7f 01       	movw	r14, r30
    149a:	81 11       	cpse	r24, r1
    149c:	b3 cf       	rjmp	.-154    	; 0x1404 <vfprintf+0x82>
    149e:	98 2f       	mov	r25, r24
    14a0:	9f 7d       	andi	r25, 0xDF	; 223
    14a2:	95 54       	subi	r25, 0x45	; 69
    14a4:	93 30       	cpi	r25, 0x03	; 3
    14a6:	28 f4       	brcc	.+10     	; 0x14b2 <vfprintf+0x130>
    14a8:	0c 5f       	subi	r16, 0xFC	; 252
    14aa:	1f 4f       	sbci	r17, 0xFF	; 255
    14ac:	9f e3       	ldi	r25, 0x3F	; 63
    14ae:	99 83       	std	Y+1, r25	; 0x01
    14b0:	0d c0       	rjmp	.+26     	; 0x14cc <vfprintf+0x14a>
    14b2:	83 36       	cpi	r24, 0x63	; 99
    14b4:	31 f0       	breq	.+12     	; 0x14c2 <vfprintf+0x140>
    14b6:	83 37       	cpi	r24, 0x73	; 115
    14b8:	71 f0       	breq	.+28     	; 0x14d6 <vfprintf+0x154>
    14ba:	83 35       	cpi	r24, 0x53	; 83
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <vfprintf+0x13e>
    14be:	55 c0       	rjmp	.+170    	; 0x156a <vfprintf+0x1e8>
    14c0:	20 c0       	rjmp	.+64     	; 0x1502 <vfprintf+0x180>
    14c2:	f8 01       	movw	r30, r16
    14c4:	80 81       	ld	r24, Z
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	0e 5f       	subi	r16, 0xFE	; 254
    14ca:	1f 4f       	sbci	r17, 0xFF	; 255
    14cc:	88 24       	eor	r8, r8
    14ce:	83 94       	inc	r8
    14d0:	91 2c       	mov	r9, r1
    14d2:	53 01       	movw	r10, r6
    14d4:	12 c0       	rjmp	.+36     	; 0x14fa <vfprintf+0x178>
    14d6:	28 01       	movw	r4, r16
    14d8:	f2 e0       	ldi	r31, 0x02	; 2
    14da:	4f 0e       	add	r4, r31
    14dc:	51 1c       	adc	r5, r1
    14de:	f8 01       	movw	r30, r16
    14e0:	a0 80       	ld	r10, Z
    14e2:	b1 80       	ldd	r11, Z+1	; 0x01
    14e4:	36 fe       	sbrs	r3, 6
    14e6:	03 c0       	rjmp	.+6      	; 0x14ee <vfprintf+0x16c>
    14e8:	69 2d       	mov	r22, r9
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <vfprintf+0x170>
    14ee:	6f ef       	ldi	r22, 0xFF	; 255
    14f0:	7f ef       	ldi	r23, 0xFF	; 255
    14f2:	c5 01       	movw	r24, r10
    14f4:	4e d1       	rcall	.+668    	; 0x1792 <strnlen>
    14f6:	4c 01       	movw	r8, r24
    14f8:	82 01       	movw	r16, r4
    14fa:	f3 2d       	mov	r31, r3
    14fc:	ff 77       	andi	r31, 0x7F	; 127
    14fe:	3f 2e       	mov	r3, r31
    1500:	15 c0       	rjmp	.+42     	; 0x152c <vfprintf+0x1aa>
    1502:	28 01       	movw	r4, r16
    1504:	22 e0       	ldi	r18, 0x02	; 2
    1506:	42 0e       	add	r4, r18
    1508:	51 1c       	adc	r5, r1
    150a:	f8 01       	movw	r30, r16
    150c:	a0 80       	ld	r10, Z
    150e:	b1 80       	ldd	r11, Z+1	; 0x01
    1510:	36 fe       	sbrs	r3, 6
    1512:	03 c0       	rjmp	.+6      	; 0x151a <vfprintf+0x198>
    1514:	69 2d       	mov	r22, r9
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	02 c0       	rjmp	.+4      	; 0x151e <vfprintf+0x19c>
    151a:	6f ef       	ldi	r22, 0xFF	; 255
    151c:	7f ef       	ldi	r23, 0xFF	; 255
    151e:	c5 01       	movw	r24, r10
    1520:	2d d1       	rcall	.+602    	; 0x177c <strnlen_P>
    1522:	4c 01       	movw	r8, r24
    1524:	f3 2d       	mov	r31, r3
    1526:	f0 68       	ori	r31, 0x80	; 128
    1528:	3f 2e       	mov	r3, r31
    152a:	82 01       	movw	r16, r4
    152c:	33 fc       	sbrc	r3, 3
    152e:	19 c0       	rjmp	.+50     	; 0x1562 <vfprintf+0x1e0>
    1530:	82 2d       	mov	r24, r2
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	88 16       	cp	r8, r24
    1536:	99 06       	cpc	r9, r25
    1538:	a0 f4       	brcc	.+40     	; 0x1562 <vfprintf+0x1e0>
    153a:	b6 01       	movw	r22, r12
    153c:	80 e2       	ldi	r24, 0x20	; 32
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	33 d1       	rcall	.+614    	; 0x17a8 <fputc>
    1542:	2a 94       	dec	r2
    1544:	f5 cf       	rjmp	.-22     	; 0x1530 <vfprintf+0x1ae>
    1546:	f5 01       	movw	r30, r10
    1548:	37 fc       	sbrc	r3, 7
    154a:	85 91       	lpm	r24, Z+
    154c:	37 fe       	sbrs	r3, 7
    154e:	81 91       	ld	r24, Z+
    1550:	5f 01       	movw	r10, r30
    1552:	b6 01       	movw	r22, r12
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	28 d1       	rcall	.+592    	; 0x17a8 <fputc>
    1558:	21 10       	cpse	r2, r1
    155a:	2a 94       	dec	r2
    155c:	21 e0       	ldi	r18, 0x01	; 1
    155e:	82 1a       	sub	r8, r18
    1560:	91 08       	sbc	r9, r1
    1562:	81 14       	cp	r8, r1
    1564:	91 04       	cpc	r9, r1
    1566:	79 f7       	brne	.-34     	; 0x1546 <vfprintf+0x1c4>
    1568:	e1 c0       	rjmp	.+450    	; 0x172c <vfprintf+0x3aa>
    156a:	84 36       	cpi	r24, 0x64	; 100
    156c:	11 f0       	breq	.+4      	; 0x1572 <vfprintf+0x1f0>
    156e:	89 36       	cpi	r24, 0x69	; 105
    1570:	39 f5       	brne	.+78     	; 0x15c0 <vfprintf+0x23e>
    1572:	f8 01       	movw	r30, r16
    1574:	37 fe       	sbrs	r3, 7
    1576:	07 c0       	rjmp	.+14     	; 0x1586 <vfprintf+0x204>
    1578:	60 81       	ld	r22, Z
    157a:	71 81       	ldd	r23, Z+1	; 0x01
    157c:	82 81       	ldd	r24, Z+2	; 0x02
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	0c 5f       	subi	r16, 0xFC	; 252
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	08 c0       	rjmp	.+16     	; 0x1596 <vfprintf+0x214>
    1586:	60 81       	ld	r22, Z
    1588:	71 81       	ldd	r23, Z+1	; 0x01
    158a:	07 2e       	mov	r0, r23
    158c:	00 0c       	add	r0, r0
    158e:	88 0b       	sbc	r24, r24
    1590:	99 0b       	sbc	r25, r25
    1592:	0e 5f       	subi	r16, 0xFE	; 254
    1594:	1f 4f       	sbci	r17, 0xFF	; 255
    1596:	f3 2d       	mov	r31, r3
    1598:	ff 76       	andi	r31, 0x6F	; 111
    159a:	3f 2e       	mov	r3, r31
    159c:	97 ff       	sbrs	r25, 7
    159e:	09 c0       	rjmp	.+18     	; 0x15b2 <vfprintf+0x230>
    15a0:	90 95       	com	r25
    15a2:	80 95       	com	r24
    15a4:	70 95       	com	r23
    15a6:	61 95       	neg	r22
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	8f 4f       	sbci	r24, 0xFF	; 255
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	f0 68       	ori	r31, 0x80	; 128
    15b0:	3f 2e       	mov	r3, r31
    15b2:	2a e0       	ldi	r18, 0x0A	; 10
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	a3 01       	movw	r20, r6
    15b8:	33 d1       	rcall	.+614    	; 0x1820 <__ultoa_invert>
    15ba:	88 2e       	mov	r8, r24
    15bc:	86 18       	sub	r8, r6
    15be:	44 c0       	rjmp	.+136    	; 0x1648 <vfprintf+0x2c6>
    15c0:	85 37       	cpi	r24, 0x75	; 117
    15c2:	31 f4       	brne	.+12     	; 0x15d0 <vfprintf+0x24e>
    15c4:	23 2d       	mov	r18, r3
    15c6:	2f 7e       	andi	r18, 0xEF	; 239
    15c8:	b2 2e       	mov	r11, r18
    15ca:	2a e0       	ldi	r18, 0x0A	; 10
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	25 c0       	rjmp	.+74     	; 0x161a <vfprintf+0x298>
    15d0:	93 2d       	mov	r25, r3
    15d2:	99 7f       	andi	r25, 0xF9	; 249
    15d4:	b9 2e       	mov	r11, r25
    15d6:	8f 36       	cpi	r24, 0x6F	; 111
    15d8:	c1 f0       	breq	.+48     	; 0x160a <vfprintf+0x288>
    15da:	18 f4       	brcc	.+6      	; 0x15e2 <vfprintf+0x260>
    15dc:	88 35       	cpi	r24, 0x58	; 88
    15de:	79 f0       	breq	.+30     	; 0x15fe <vfprintf+0x27c>
    15e0:	ae c0       	rjmp	.+348    	; 0x173e <vfprintf+0x3bc>
    15e2:	80 37       	cpi	r24, 0x70	; 112
    15e4:	19 f0       	breq	.+6      	; 0x15ec <vfprintf+0x26a>
    15e6:	88 37       	cpi	r24, 0x78	; 120
    15e8:	21 f0       	breq	.+8      	; 0x15f2 <vfprintf+0x270>
    15ea:	a9 c0       	rjmp	.+338    	; 0x173e <vfprintf+0x3bc>
    15ec:	e9 2f       	mov	r30, r25
    15ee:	e0 61       	ori	r30, 0x10	; 16
    15f0:	be 2e       	mov	r11, r30
    15f2:	b4 fe       	sbrs	r11, 4
    15f4:	0d c0       	rjmp	.+26     	; 0x1610 <vfprintf+0x28e>
    15f6:	fb 2d       	mov	r31, r11
    15f8:	f4 60       	ori	r31, 0x04	; 4
    15fa:	bf 2e       	mov	r11, r31
    15fc:	09 c0       	rjmp	.+18     	; 0x1610 <vfprintf+0x28e>
    15fe:	34 fe       	sbrs	r3, 4
    1600:	0a c0       	rjmp	.+20     	; 0x1616 <vfprintf+0x294>
    1602:	29 2f       	mov	r18, r25
    1604:	26 60       	ori	r18, 0x06	; 6
    1606:	b2 2e       	mov	r11, r18
    1608:	06 c0       	rjmp	.+12     	; 0x1616 <vfprintf+0x294>
    160a:	28 e0       	ldi	r18, 0x08	; 8
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	05 c0       	rjmp	.+10     	; 0x161a <vfprintf+0x298>
    1610:	20 e1       	ldi	r18, 0x10	; 16
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	02 c0       	rjmp	.+4      	; 0x161a <vfprintf+0x298>
    1616:	20 e1       	ldi	r18, 0x10	; 16
    1618:	32 e0       	ldi	r19, 0x02	; 2
    161a:	f8 01       	movw	r30, r16
    161c:	b7 fe       	sbrs	r11, 7
    161e:	07 c0       	rjmp	.+14     	; 0x162e <vfprintf+0x2ac>
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	82 81       	ldd	r24, Z+2	; 0x02
    1626:	93 81       	ldd	r25, Z+3	; 0x03
    1628:	0c 5f       	subi	r16, 0xFC	; 252
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	06 c0       	rjmp	.+12     	; 0x163a <vfprintf+0x2b8>
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 5f       	subi	r16, 0xFE	; 254
    1638:	1f 4f       	sbci	r17, 0xFF	; 255
    163a:	a3 01       	movw	r20, r6
    163c:	f1 d0       	rcall	.+482    	; 0x1820 <__ultoa_invert>
    163e:	88 2e       	mov	r8, r24
    1640:	86 18       	sub	r8, r6
    1642:	fb 2d       	mov	r31, r11
    1644:	ff 77       	andi	r31, 0x7F	; 127
    1646:	3f 2e       	mov	r3, r31
    1648:	36 fe       	sbrs	r3, 6
    164a:	0d c0       	rjmp	.+26     	; 0x1666 <vfprintf+0x2e4>
    164c:	23 2d       	mov	r18, r3
    164e:	2e 7f       	andi	r18, 0xFE	; 254
    1650:	a2 2e       	mov	r10, r18
    1652:	89 14       	cp	r8, r9
    1654:	58 f4       	brcc	.+22     	; 0x166c <vfprintf+0x2ea>
    1656:	34 fe       	sbrs	r3, 4
    1658:	0b c0       	rjmp	.+22     	; 0x1670 <vfprintf+0x2ee>
    165a:	32 fc       	sbrc	r3, 2
    165c:	09 c0       	rjmp	.+18     	; 0x1670 <vfprintf+0x2ee>
    165e:	83 2d       	mov	r24, r3
    1660:	8e 7e       	andi	r24, 0xEE	; 238
    1662:	a8 2e       	mov	r10, r24
    1664:	05 c0       	rjmp	.+10     	; 0x1670 <vfprintf+0x2ee>
    1666:	b8 2c       	mov	r11, r8
    1668:	a3 2c       	mov	r10, r3
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <vfprintf+0x2f0>
    166c:	b8 2c       	mov	r11, r8
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <vfprintf+0x2f0>
    1670:	b9 2c       	mov	r11, r9
    1672:	a4 fe       	sbrs	r10, 4
    1674:	0f c0       	rjmp	.+30     	; 0x1694 <vfprintf+0x312>
    1676:	fe 01       	movw	r30, r28
    1678:	e8 0d       	add	r30, r8
    167a:	f1 1d       	adc	r31, r1
    167c:	80 81       	ld	r24, Z
    167e:	80 33       	cpi	r24, 0x30	; 48
    1680:	21 f4       	brne	.+8      	; 0x168a <vfprintf+0x308>
    1682:	9a 2d       	mov	r25, r10
    1684:	99 7e       	andi	r25, 0xE9	; 233
    1686:	a9 2e       	mov	r10, r25
    1688:	09 c0       	rjmp	.+18     	; 0x169c <vfprintf+0x31a>
    168a:	a2 fe       	sbrs	r10, 2
    168c:	06 c0       	rjmp	.+12     	; 0x169a <vfprintf+0x318>
    168e:	b3 94       	inc	r11
    1690:	b3 94       	inc	r11
    1692:	04 c0       	rjmp	.+8      	; 0x169c <vfprintf+0x31a>
    1694:	8a 2d       	mov	r24, r10
    1696:	86 78       	andi	r24, 0x86	; 134
    1698:	09 f0       	breq	.+2      	; 0x169c <vfprintf+0x31a>
    169a:	b3 94       	inc	r11
    169c:	a3 fc       	sbrc	r10, 3
    169e:	10 c0       	rjmp	.+32     	; 0x16c0 <vfprintf+0x33e>
    16a0:	a0 fe       	sbrs	r10, 0
    16a2:	06 c0       	rjmp	.+12     	; 0x16b0 <vfprintf+0x32e>
    16a4:	b2 14       	cp	r11, r2
    16a6:	80 f4       	brcc	.+32     	; 0x16c8 <vfprintf+0x346>
    16a8:	28 0c       	add	r2, r8
    16aa:	92 2c       	mov	r9, r2
    16ac:	9b 18       	sub	r9, r11
    16ae:	0d c0       	rjmp	.+26     	; 0x16ca <vfprintf+0x348>
    16b0:	b2 14       	cp	r11, r2
    16b2:	58 f4       	brcc	.+22     	; 0x16ca <vfprintf+0x348>
    16b4:	b6 01       	movw	r22, r12
    16b6:	80 e2       	ldi	r24, 0x20	; 32
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	76 d0       	rcall	.+236    	; 0x17a8 <fputc>
    16bc:	b3 94       	inc	r11
    16be:	f8 cf       	rjmp	.-16     	; 0x16b0 <vfprintf+0x32e>
    16c0:	b2 14       	cp	r11, r2
    16c2:	18 f4       	brcc	.+6      	; 0x16ca <vfprintf+0x348>
    16c4:	2b 18       	sub	r2, r11
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <vfprintf+0x34a>
    16c8:	98 2c       	mov	r9, r8
    16ca:	21 2c       	mov	r2, r1
    16cc:	a4 fe       	sbrs	r10, 4
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <vfprintf+0x36c>
    16d0:	b6 01       	movw	r22, r12
    16d2:	80 e3       	ldi	r24, 0x30	; 48
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	68 d0       	rcall	.+208    	; 0x17a8 <fputc>
    16d8:	a2 fe       	sbrs	r10, 2
    16da:	16 c0       	rjmp	.+44     	; 0x1708 <vfprintf+0x386>
    16dc:	a1 fc       	sbrc	r10, 1
    16de:	03 c0       	rjmp	.+6      	; 0x16e6 <vfprintf+0x364>
    16e0:	88 e7       	ldi	r24, 0x78	; 120
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <vfprintf+0x368>
    16e6:	88 e5       	ldi	r24, 0x58	; 88
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	b6 01       	movw	r22, r12
    16ec:	0c c0       	rjmp	.+24     	; 0x1706 <vfprintf+0x384>
    16ee:	8a 2d       	mov	r24, r10
    16f0:	86 78       	andi	r24, 0x86	; 134
    16f2:	51 f0       	breq	.+20     	; 0x1708 <vfprintf+0x386>
    16f4:	a1 fe       	sbrs	r10, 1
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <vfprintf+0x37a>
    16f8:	8b e2       	ldi	r24, 0x2B	; 43
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <vfprintf+0x37c>
    16fc:	80 e2       	ldi	r24, 0x20	; 32
    16fe:	a7 fc       	sbrc	r10, 7
    1700:	8d e2       	ldi	r24, 0x2D	; 45
    1702:	b6 01       	movw	r22, r12
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	50 d0       	rcall	.+160    	; 0x17a8 <fputc>
    1708:	89 14       	cp	r8, r9
    170a:	30 f4       	brcc	.+12     	; 0x1718 <vfprintf+0x396>
    170c:	b6 01       	movw	r22, r12
    170e:	80 e3       	ldi	r24, 0x30	; 48
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	4a d0       	rcall	.+148    	; 0x17a8 <fputc>
    1714:	9a 94       	dec	r9
    1716:	f8 cf       	rjmp	.-16     	; 0x1708 <vfprintf+0x386>
    1718:	8a 94       	dec	r8
    171a:	f3 01       	movw	r30, r6
    171c:	e8 0d       	add	r30, r8
    171e:	f1 1d       	adc	r31, r1
    1720:	80 81       	ld	r24, Z
    1722:	b6 01       	movw	r22, r12
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	40 d0       	rcall	.+128    	; 0x17a8 <fputc>
    1728:	81 10       	cpse	r8, r1
    172a:	f6 cf       	rjmp	.-20     	; 0x1718 <vfprintf+0x396>
    172c:	22 20       	and	r2, r2
    172e:	09 f4       	brne	.+2      	; 0x1732 <vfprintf+0x3b0>
    1730:	4e ce       	rjmp	.-868    	; 0x13ce <vfprintf+0x4c>
    1732:	b6 01       	movw	r22, r12
    1734:	80 e2       	ldi	r24, 0x20	; 32
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	37 d0       	rcall	.+110    	; 0x17a8 <fputc>
    173a:	2a 94       	dec	r2
    173c:	f7 cf       	rjmp	.-18     	; 0x172c <vfprintf+0x3aa>
    173e:	f6 01       	movw	r30, r12
    1740:	86 81       	ldd	r24, Z+6	; 0x06
    1742:	97 81       	ldd	r25, Z+7	; 0x07
    1744:	02 c0       	rjmp	.+4      	; 0x174a <vfprintf+0x3c8>
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	9f ef       	ldi	r25, 0xFF	; 255
    174a:	2b 96       	adiw	r28, 0x0b	; 11
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	ff 90       	pop	r15
    1760:	ef 90       	pop	r14
    1762:	df 90       	pop	r13
    1764:	cf 90       	pop	r12
    1766:	bf 90       	pop	r11
    1768:	af 90       	pop	r10
    176a:	9f 90       	pop	r9
    176c:	8f 90       	pop	r8
    176e:	7f 90       	pop	r7
    1770:	6f 90       	pop	r6
    1772:	5f 90       	pop	r5
    1774:	4f 90       	pop	r4
    1776:	3f 90       	pop	r3
    1778:	2f 90       	pop	r2
    177a:	08 95       	ret

0000177c <strnlen_P>:
    177c:	fc 01       	movw	r30, r24
    177e:	05 90       	lpm	r0, Z+
    1780:	61 50       	subi	r22, 0x01	; 1
    1782:	70 40       	sbci	r23, 0x00	; 0
    1784:	01 10       	cpse	r0, r1
    1786:	d8 f7       	brcc	.-10     	; 0x177e <strnlen_P+0x2>
    1788:	80 95       	com	r24
    178a:	90 95       	com	r25
    178c:	8e 0f       	add	r24, r30
    178e:	9f 1f       	adc	r25, r31
    1790:	08 95       	ret

00001792 <strnlen>:
    1792:	fc 01       	movw	r30, r24
    1794:	61 50       	subi	r22, 0x01	; 1
    1796:	70 40       	sbci	r23, 0x00	; 0
    1798:	01 90       	ld	r0, Z+
    179a:	01 10       	cpse	r0, r1
    179c:	d8 f7       	brcc	.-10     	; 0x1794 <strnlen+0x2>
    179e:	80 95       	com	r24
    17a0:	90 95       	com	r25
    17a2:	8e 0f       	add	r24, r30
    17a4:	9f 1f       	adc	r25, r31
    17a6:	08 95       	ret

000017a8 <fputc>:
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	fb 01       	movw	r30, r22
    17b2:	23 81       	ldd	r18, Z+3	; 0x03
    17b4:	21 fd       	sbrc	r18, 1
    17b6:	03 c0       	rjmp	.+6      	; 0x17be <fputc+0x16>
    17b8:	8f ef       	ldi	r24, 0xFF	; 255
    17ba:	9f ef       	ldi	r25, 0xFF	; 255
    17bc:	2c c0       	rjmp	.+88     	; 0x1816 <fputc+0x6e>
    17be:	22 ff       	sbrs	r18, 2
    17c0:	16 c0       	rjmp	.+44     	; 0x17ee <fputc+0x46>
    17c2:	46 81       	ldd	r20, Z+6	; 0x06
    17c4:	57 81       	ldd	r21, Z+7	; 0x07
    17c6:	24 81       	ldd	r18, Z+4	; 0x04
    17c8:	35 81       	ldd	r19, Z+5	; 0x05
    17ca:	42 17       	cp	r20, r18
    17cc:	53 07       	cpc	r21, r19
    17ce:	44 f4       	brge	.+16     	; 0x17e0 <fputc+0x38>
    17d0:	a0 81       	ld	r26, Z
    17d2:	b1 81       	ldd	r27, Z+1	; 0x01
    17d4:	9d 01       	movw	r18, r26
    17d6:	2f 5f       	subi	r18, 0xFF	; 255
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	31 83       	std	Z+1, r19	; 0x01
    17dc:	20 83       	st	Z, r18
    17de:	8c 93       	st	X, r24
    17e0:	26 81       	ldd	r18, Z+6	; 0x06
    17e2:	37 81       	ldd	r19, Z+7	; 0x07
    17e4:	2f 5f       	subi	r18, 0xFF	; 255
    17e6:	3f 4f       	sbci	r19, 0xFF	; 255
    17e8:	37 83       	std	Z+7, r19	; 0x07
    17ea:	26 83       	std	Z+6, r18	; 0x06
    17ec:	14 c0       	rjmp	.+40     	; 0x1816 <fputc+0x6e>
    17ee:	8b 01       	movw	r16, r22
    17f0:	ec 01       	movw	r28, r24
    17f2:	fb 01       	movw	r30, r22
    17f4:	00 84       	ldd	r0, Z+8	; 0x08
    17f6:	f1 85       	ldd	r31, Z+9	; 0x09
    17f8:	e0 2d       	mov	r30, r0
    17fa:	09 95       	icall
    17fc:	89 2b       	or	r24, r25
    17fe:	e1 f6       	brne	.-72     	; 0x17b8 <fputc+0x10>
    1800:	d8 01       	movw	r26, r16
    1802:	16 96       	adiw	r26, 0x06	; 6
    1804:	8d 91       	ld	r24, X+
    1806:	9c 91       	ld	r25, X
    1808:	17 97       	sbiw	r26, 0x07	; 7
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	17 96       	adiw	r26, 0x07	; 7
    180e:	9c 93       	st	X, r25
    1810:	8e 93       	st	-X, r24
    1812:	16 97       	sbiw	r26, 0x06	; 6
    1814:	ce 01       	movw	r24, r28
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	08 95       	ret

00001820 <__ultoa_invert>:
    1820:	fa 01       	movw	r30, r20
    1822:	aa 27       	eor	r26, r26
    1824:	28 30       	cpi	r18, 0x08	; 8
    1826:	51 f1       	breq	.+84     	; 0x187c <__ultoa_invert+0x5c>
    1828:	20 31       	cpi	r18, 0x10	; 16
    182a:	81 f1       	breq	.+96     	; 0x188c <__ultoa_invert+0x6c>
    182c:	e8 94       	clt
    182e:	6f 93       	push	r22
    1830:	6e 7f       	andi	r22, 0xFE	; 254
    1832:	6e 5f       	subi	r22, 0xFE	; 254
    1834:	7f 4f       	sbci	r23, 0xFF	; 255
    1836:	8f 4f       	sbci	r24, 0xFF	; 255
    1838:	9f 4f       	sbci	r25, 0xFF	; 255
    183a:	af 4f       	sbci	r26, 0xFF	; 255
    183c:	b1 e0       	ldi	r27, 0x01	; 1
    183e:	3e d0       	rcall	.+124    	; 0x18bc <__ultoa_invert+0x9c>
    1840:	b4 e0       	ldi	r27, 0x04	; 4
    1842:	3c d0       	rcall	.+120    	; 0x18bc <__ultoa_invert+0x9c>
    1844:	67 0f       	add	r22, r23
    1846:	78 1f       	adc	r23, r24
    1848:	89 1f       	adc	r24, r25
    184a:	9a 1f       	adc	r25, r26
    184c:	a1 1d       	adc	r26, r1
    184e:	68 0f       	add	r22, r24
    1850:	79 1f       	adc	r23, r25
    1852:	8a 1f       	adc	r24, r26
    1854:	91 1d       	adc	r25, r1
    1856:	a1 1d       	adc	r26, r1
    1858:	6a 0f       	add	r22, r26
    185a:	71 1d       	adc	r23, r1
    185c:	81 1d       	adc	r24, r1
    185e:	91 1d       	adc	r25, r1
    1860:	a1 1d       	adc	r26, r1
    1862:	20 d0       	rcall	.+64     	; 0x18a4 <__ultoa_invert+0x84>
    1864:	09 f4       	brne	.+2      	; 0x1868 <__ultoa_invert+0x48>
    1866:	68 94       	set
    1868:	3f 91       	pop	r19
    186a:	2a e0       	ldi	r18, 0x0A	; 10
    186c:	26 9f       	mul	r18, r22
    186e:	11 24       	eor	r1, r1
    1870:	30 19       	sub	r19, r0
    1872:	30 5d       	subi	r19, 0xD0	; 208
    1874:	31 93       	st	Z+, r19
    1876:	de f6       	brtc	.-74     	; 0x182e <__ultoa_invert+0xe>
    1878:	cf 01       	movw	r24, r30
    187a:	08 95       	ret
    187c:	46 2f       	mov	r20, r22
    187e:	47 70       	andi	r20, 0x07	; 7
    1880:	40 5d       	subi	r20, 0xD0	; 208
    1882:	41 93       	st	Z+, r20
    1884:	b3 e0       	ldi	r27, 0x03	; 3
    1886:	0f d0       	rcall	.+30     	; 0x18a6 <__ultoa_invert+0x86>
    1888:	c9 f7       	brne	.-14     	; 0x187c <__ultoa_invert+0x5c>
    188a:	f6 cf       	rjmp	.-20     	; 0x1878 <__ultoa_invert+0x58>
    188c:	46 2f       	mov	r20, r22
    188e:	4f 70       	andi	r20, 0x0F	; 15
    1890:	40 5d       	subi	r20, 0xD0	; 208
    1892:	4a 33       	cpi	r20, 0x3A	; 58
    1894:	18 f0       	brcs	.+6      	; 0x189c <__ultoa_invert+0x7c>
    1896:	49 5d       	subi	r20, 0xD9	; 217
    1898:	31 fd       	sbrc	r19, 1
    189a:	40 52       	subi	r20, 0x20	; 32
    189c:	41 93       	st	Z+, r20
    189e:	02 d0       	rcall	.+4      	; 0x18a4 <__ultoa_invert+0x84>
    18a0:	a9 f7       	brne	.-22     	; 0x188c <__ultoa_invert+0x6c>
    18a2:	ea cf       	rjmp	.-44     	; 0x1878 <__ultoa_invert+0x58>
    18a4:	b4 e0       	ldi	r27, 0x04	; 4
    18a6:	a6 95       	lsr	r26
    18a8:	97 95       	ror	r25
    18aa:	87 95       	ror	r24
    18ac:	77 95       	ror	r23
    18ae:	67 95       	ror	r22
    18b0:	ba 95       	dec	r27
    18b2:	c9 f7       	brne	.-14     	; 0x18a6 <__ultoa_invert+0x86>
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	61 05       	cpc	r22, r1
    18b8:	71 05       	cpc	r23, r1
    18ba:	08 95       	ret
    18bc:	9b 01       	movw	r18, r22
    18be:	ac 01       	movw	r20, r24
    18c0:	0a 2e       	mov	r0, r26
    18c2:	06 94       	lsr	r0
    18c4:	57 95       	ror	r21
    18c6:	47 95       	ror	r20
    18c8:	37 95       	ror	r19
    18ca:	27 95       	ror	r18
    18cc:	ba 95       	dec	r27
    18ce:	c9 f7       	brne	.-14     	; 0x18c2 <__ultoa_invert+0xa2>
    18d0:	62 0f       	add	r22, r18
    18d2:	73 1f       	adc	r23, r19
    18d4:	84 1f       	adc	r24, r20
    18d6:	95 1f       	adc	r25, r21
    18d8:	a0 1d       	adc	r26, r0
    18da:	08 95       	ret

000018dc <_exit>:
    18dc:	f8 94       	cli

000018de <__stop_program>:
    18de:	ff cf       	rjmp	.-2      	; 0x18de <__stop_program>
